module base;

import std.random;
shared IRandom deflt_rng;
void init() { deflt_rng = getPRNG(23); }

float randf() { return std.random.base.randf deflt_rng; }

struct Ray {
  vec3f pos, dir;
  string toString() return "[$pos + k $dir]";
}

struct HdrTex {
  int w, h;
  vec3f[] data;
}

import gd;
struct Texture {
  gdImagePtr gdp;
  HdrTex* hdp;
}

struct Result {
  float distance;
  vec3f normal;
  vec3f reflective-color, emissive-color;
  alias col = reflective-color;
  vec2f texcoord; Texture* texinfo;
  bool success;
  string toString() {
    if (success) {
      return "[res: hit at $distance: nor $normal, col $col]";
    } else {
      return "[res: no hit]";
    }
  }
}

vec3f evaluateRay(Ray[] steps, Result[] hits) {
  vec3f res = vec3f(0);
  assert(steps.length == hits.length);
  for (int i = steps.length - 1; i >= 0; --i) {
    if (!hits[i].success) res = vec3f(0);
    else res = hits[i].(reflective-color * res + emissive-color);
  }
  return res;
}

interface CommandHandler;
