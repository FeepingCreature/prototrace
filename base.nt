module base;

import std.random;
shared IRandom deflt_rng;
void init() { deflt_rng = getPRNG(23); }

float randf() { return std.random.base.randf deflt_rng; }

struct Ray {
  vec3f pos, dir;
  string toString() return "[$pos + k $dir]";
}

struct HdrTex {
  int w, h;
  vec3f[] data;
}

import gd;
struct Texture {
  gdImagePtr gdp;
  HdrTex* hdp;
}

struct Result {
  float distance;
  vec3f normal;
  vec3f reflective-color, emissive-color;
  alias col = reflective-color;
  vec2f texcoord; Texture* texinfo;
  int data;
  bool success;
  void claim() {
    success = true;
    reflective-color = vec3f 1;
    emissive-color = vec3f 0;
  }
  string toString() {
    if (success) {
      return "[res: hit at $distance: nor $normal, col $col, emit $emissive-color]";
    } else {
      return "[res: no hit]";
    }
  }
}


interface CommandHandler;
