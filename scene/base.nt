module scene.base;

public import base, vm;

public import std.math;

interface CommandHandler {
  void process(VMState[] list, int start, end);
}

struct VMStats {
  int results-needed-max, results-needed-cur;
  int rays-needed-max, rays-needed-cur;
  void needsResults(int num) { results-needed-cur += num; recordHighPoint; }
  void needsRays(int num) { rays-needed-cur += num; recordHighPoint; }
  void needsResult() needsResults 1;
  void needsRay() needsRays 1;
  void recordHighPoint() {
    if (rays-needed-cur > rays-needed-max) rays-needed-max = rays-needed-cur;
    if (results-needed-cur > results-needed-max) results-needed-max = results-needed-cur;
  }
}

abstract class SceneObject : CommandHandler {
  bool collide(Ray*, Result*) { assert(false, "$this::collide not implemented"); }
  void process(VMState[] list, int start, end) { assert(false, "$this::process not implemented"); }
  CommandHandler[] buildCommandStream(VMStats*) { assert(false, "$this::buildCommandStream not implemented"); }
}
