module scene.bound;

import scene.triangle, scene.base;

class BoxBound : SceneObject {
  AABB aabb;
  SceneObject sup;
  int skip;
  bool aabbIsInited;
  void init(SceneObject sup) { this.sup = sup; }
  void init(vec3f a, vec3f b, SceneObject sup) { aabb.(a, b) = (a, b); this.sup = sup; }
  void addBox(vec3f a, b) {
    if (!aabbIsInited) {
      aabbIsInited = true;
      aabb.addInitialPoint a;
      aabb.addPoint b;
    } else {
      aabb.addPoint a;
      aabb.addPoint b;
    }
  }
  void process(VMState[] list) {
    AABB aabb = this.aabb;
    for (int i = 0; i < list.length; ++i) {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      if (!aabb.rayHits(&sp.ray.pos)) {
        sp.stream = sp.stream[skip..$];
        using sp mixin(allocResult);
        sp.result.success = false;
      }
    }
  }
  CommandHandler[] buildCommandStream(VMStats* stats) {
    auto stream = sup.buildCommandStream stats;
    skip = stream.length;
    return CommandHandler[]:null ~ this ~ stream;
  }
}
