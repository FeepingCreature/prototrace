module scene.checkerpattern;

import scene.base;

class CheckerPattern : SceneObject {
  SceneObject sup;
  vec3f a, b;
  void init(vec3f a, b, SceneObject so) { sup = so; this.(a, b) = (a, b); }
  bool collide(Ray* ray, Result* res) {
    if (!sup.collide(ray, res)) return false;
    auto hitpos = ray.(pos + dir * res.distance);
    auto hitpos_int = vec3i((hitpos).(int:x & 1, int:y & 1, int:z & 1));
    bool checker = bool:((hitpos_int.x & 1) xor (hitpos_int.y & 1) xor (hitpos_int.z & 1));
    res.col = [a, b][checker];
    return true;
  }
  void process(VMState[] list) {
    for int i <- 0..list.length {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      auto res = resplanes[sp.result-id - 1][i];
      if (res.success) {
        auto ray = rayplanes[sp.ray-id - 1][i];
        auto hitpos = ray.(pos + dir * res.distance);
        bool checker = bool:((int:hitpos.x & 1) xor (int:hitpos.y & 1) xor (int:hitpos.z & 1));
        res.col = [a, b][checker];
      }
    }
  }
  CommandHandler[] buildCommandStream(VMStats* stats) {
    return sup.buildCommandStream(stats) ~ this;
  }
}
