module scene.color;

import scene.base;

// used for purely emissive surfaces, like sky or lamps
class Shine : SceneObject {
  SceneObject sup;
  vec3f col;
  void init(vec3f col, SceneObject so) { sup = so; this.col = col; }
  bool collide(Ray* ray, Result* res) { raise new Error "Shine::collide not implemented! "; }
  void process(VMState[] list) {
    for int i <- 0..list.length {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      auto res = &resplanes[sp.result-id-1][i];
      res.emissive-color = col;
      res.reflective-color = vec3f(0);
    }
  }
  CommandHandler[] buildCommandStream(VMStats* stats) {
    return sup.buildCommandStream(stats) ~ this;
  }
}

class Color : SceneObject {
  SceneObject sup;
  vec3f col;
  void init(vec3f col, SceneObject so) { sup = so; this.col = col; }
  bool collide(Ray* ray, Result* res) { raise new Error "Color::collide not implemented! "; }
  void process(VMState[] list) {
    for int i <- 0..list.length {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      auto res = &resplanes[sp.result-id-1][i];
      res.reflective-color = col;
      res.emissive-color = vec3f(0);
    }
  }
  CommandHandler[] buildCommandStream(VMStats* stats) {
    return sup.buildCommandStream(stats) ~ this;
  }
}
