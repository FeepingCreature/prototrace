module scene.util;

import scene.base;

class AverageStep : CommandHandler {
  int count;
  int dst, src; // average src into dst
  void init(int c, dst, src) { (count, this.dst, this.src) = (c, dst, src); }
  void process(VMState[] list) {
    float factor = 1f / count;
    for int i <- 0 .. list.length {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      auto res1 = &sp.result-stack[dst], res2 = &sp.result-stack[src];
      vec3f sum = vec3f(0);
      if (res1.success) sum = res1.emissive-color;
      if (res2.success) sum += res2.emissive-color * factor;
      res1.success |= res2.success;
      res1.emissive-color = sum;
    }
  }
}

class AllocEmptyResult : CommandHandler {
  void process(VMState[] list) {
    for int i <- 0 .. list.length {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      using sp mixin(allocResult);
      sp.result.success = false;
    }
  }
}

class FreeResult : CommandHandler {
  void process(VMState[] list) {
    for int i <- 0 .. list.length {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      using sp mixin(freeResult.replace("!!", "1"));
    }
  }
}

class AverageResults : SceneObject {
  SceneObject sup;
  int count;
  void init(int count, SceneObject sup) this.(sup, count) = (sup, count);
  CommandHandler[] buildCommandStream(VMStats* stats) {
    int base-id = stats.results-needed-cur;
    stats.results-needed-cur ++;
    auto stream = sup.buildCommandStream(stats);
    stats.results-needed-cur --;
    
    auto as = new AverageStep (count, base-id, base-id + 1);
    auto fr = new FreeResult;
    
    CommandHandler[auto~] res;
    res ~= new AllocEmptyResult; // res ++
    for (int i = 0; i < count; ++i) {
      res ~= stream; // res ++
      res ~= as;
      res ~= fr; // res --
    }
    return res[];
  }
}

class FreeRay : CommandHandler {
  void process(VMState[] list) {
    for int i <- 0 .. list.length {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      using sp mixin(freeRay.replace("!!", "1"));
    }
  }
}

class CopyRay : CommandHandler {
  void process(VMState[] list) {
    for int i <- 0 .. list.length {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      using sp mixin(allocRay);
      *sp.ray = sp.rays[$-2];
    }
  }
}
