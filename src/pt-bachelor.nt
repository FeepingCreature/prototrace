module pt;

import std.lib.opengl, std.math, sdl, std.thread, std.file, std.string;
import std.boehm;
import std.macros.swap;

import
  scene.checkerpattern, scene.group, scene.plane, scene.scale,
  scene.sphere, scene.translate, scene.triangle, scene.util,
  scene.color, scene.base, scene.bound, scene.envmap, scene.texture,
  scene.lighting, scene.metro;

pragma(linker, "fastroutines.o");

extern(C) {
  void ray_to_coords(int dw, dh, Ray* rayp, int* xp, yp);
  float fov;
}

shared int markovSteps, burnInLimit;
shared float minBrightnessFactor;
shared (int, int) dbgPos;

import gd;
Texture* readImage(string fname) {
  if (!fname.exists()) {
    if      exists auto asPNG = "$fname.png" fname = asPNG;
    else if exists auto asJPG = "$fname.jpg" fname = asJPG;
    else if exists auto asHDR = "$fname.hdr" fname = asHDR;
    else raise new Error "No such image: $fname";
  }
  auto res = new Texture;
  auto fdata = readAll fname;
  if (fname.toLower().endsWith ".jpg") { res.gdp = gdImageCreateFromJpegPtr(fdata.(length, ptr)); return res; }
  if (fname.toLower().endsWith ".png") { res.gdp = gdImageCreateFromPngPtr(fdata.(length, ptr)); return res; }
  if (fname.toLower().endsWith ".hdr") { res.hdp = parseHDR(fdata, fname); return res; }
  raise new Error "Unknown extension in '$fname'! ";
}

alias atoi = std.string.atoi;
alias atof = std.string.atof;
alias rand = scene.util.rand;

float value(vec3f v, bool isBack) {
  alias r = v.x, g = v.y, b = v.z;
  auto res = r * 0.2 + g * 0.3 + b * 0.5;
  if (isBack && res > 0.05) res = 0.05; // sanity limit for background
  // if (isBack) res /= 10K;
  return res;
}

import std.getopt, std.time, std.process;
import c.fenv;
extern(C) { void GC_disable(); void GC_gcollect(); void GC_enable(); }
extern(C) int feenableexcept(int);
void main(string[] args) {
  set-handler (Error err) { writeln "$(read-pretty-fcc-backtrace())\n$err. Aborting. "; asm `int $3`; }
  bool break-on-float-errors = true;
  // bool break-on-float-errors = false;
  
  float desired-fps = 0.5;
  int threads = 4; // number of subdivisions
  int samples = 1;
  (int, int) imgres; // fixed-size single-pass render
  string file = "out.png";
  int stepsize = 1;
  dbgPos = (-1, -1);
  markovSteps = 512;
  // burnInLimit = 128;
  burnInLimit = 0;
  minBrightnessFactor = 0;
  bool useBoehm = false;
  allowLensmut = true;
  bool saveFrames;
  int depth = 12;
  string specfile;
  float savestep = 4;
  // empirically determined to be fastest thereabouts. not sure why.
  // here's a quick&dirty benchmark
  /*
    for t in {1..16}
    do
      GRP=$((1 << t))
      TT=$(/usr/bin/time -p ./pt -r "1024x1024" -g $GRP 2>&1 |grep ^user |cut -d\  -f2)
      echo "$GRP $TT"
    done
  */
  int groupsize = 256;
  bool average;
  using new Options {
    addLong("fps",         "f", λ(string s) desired-fps = std.string.atof s; );
    addLong("threads",     "t", λ(string s) threads = atoi s; );
    addLong("samples",     "s", λ(string s) samples = atoi s; );
    addLong("res",         "r", λ(string s) using s.split "x" imgres = (atoi that[0], atoi that[1]); );
    addLong("output",      "o", λ(string s) file = s; );
    addLong("keepgoing",   "k", λ break-on-float-errors = false; );
    addLong("depth",       "d", λ(string s) depth = atoi s; );
    addLong("markovsteps", "m", λ(string s) markovSteps = atoi s; );
    addLong("burninlimit", "l", λ(string s) burnInLimit = atoi s; );
    addLong("minbrightnessfactor", "b", λ(string s) minBrightnessFactor = atof s; );
    addLong("boehm",       "n", λ useBoehm = true; );
    addLong("noLensmut",   "x", λ allowLensmut = false; );
    addLong("stepsize",    "z", λ(string s) stepsize = atoi s; );
    addLong("saveframes",  "v", λ saveFrames = true; );
    addLong("savestep",    "e", λ(string s) savestep = atof s; );
    addLong("average",     "a", λ average = true; );
    addLong("help",        "h", λ{ printHelp; exit 0; });
    addLong("groupsize",   "g", λ(string s) groupsize = atoi s;);
    addLong("input",       "i", λ(string s) specfile = s;);
    args = process args;
  }
  void check() {
    if (!(mxcsr & (1 << 15))) {
      writeln "Oops! FTZ has gotten 0. Resetting. $(mxcsr)";
      // _interrupt 3;
      // rtz, fz
      mxcsr |= (3 << 13) | (1 << 15);
      if (break-on-float-errors)
        for auto val <- [FE_DIVBYZERO, FE_INVALID/*, FE_OVERFLOW .. infs are fine*/]
          feenableexcept val;
    }
  }
  if (useBoehm)
    initBoehm (debugMode => true);
  
  onResize = delegate void(int w, int h) {
    screen(w, h, flags => SDL_OPENGL | SDL_RESIZABLE | SDL_ANYFORMAT);
  };
  
  SceneObject scene;
  SceneObject object;
  float lowest = 0;
  using new Group {
    auto bb = new BoxBound that;
    alias objfile = "hikone.obj";
    // alias objfile = "room box and sphere.obj";
    // alias objfile = "teapot.obj";
    auto obj = (string: import(objfile)).split "\n";
    alias mtlfile = objfile.replace(".obj", ".mtl");
    auto mtl = (string: import(mtlfile)).split "\n";
    
    (string, Texture*)[auto~] matcache;
    Texture* lookupMatl(string matname) {
      for (string name, Texture* data) <- matcache if name == matname return data;
      bool inSection;
      auto firstmatch = "newmtl $matname";
      string fname;
      for auto line <- mtl {
        if (line.startsWith "newmtl ") {
          inSection = false;
          if (line == firstmatch) inSection = true;
        }
        
        if (inSection && string rest = line.startsWith "map_Kd ") fname = rest;
      }
      if (!fname) {
        writeln "No texture found for $matname! ";
        return null;
      } else {
        auto data = readImage fname;
        // writeln "Read image: $matname => $fname";
        matcache ~= (matname, data);
        return data;
      }
    }
    
    string[] selectAs(string delegate(string) dg) {
      string[auto~] res;
      for auto line <- obj if auto thing = dg line res ~= thing;
      return res[];
    }
    string[] selectOn(bool delegate(string) dg) {
      string[auto~] res;
      for auto line <- obj if dg line res ~= line;
      return res[];
    }
    vec3f vec3f_and_free(float[] array) { onSuccess array.free; return vec3f(array[(0, 1, 2)]); }
    vec2f vec2f_and_free(float[] array) { onSuccess array.free; return vec2f(array[(0, 1)]); }
    auto vertices = [for array <- [auto~for v <- selectAs(delegate string(string s) return s.startsWith "v ";): [auto~for part <- v.split " ": std.string.atof part].eval[]]: vec3f_and_free array].eval[];
    auto texcoords = [for array <- [auto~for v <- selectAs(delegate string(string s) return s.startsWith "vt ";): [auto~for part <- v.split " ": std.string.atof part].eval[]]: vec2f_and_free array].eval[];
    onSuccess { vertices.free; texcoords.free; }
    auto fusemtl = selectOn(delegate bool(string s) return eval s.startsWith "f " || s.startsWith "usemtl "; );
    Texture* currentTexture;
    auto currentSet = new TriangleSet;
    void flush() {
      // writeln "aabb = $(currentSet.root.aabb.a), $(currentSet.root.aabb.b)";
      if (currentSet.root.aabb.a.y < lowest) lowest = currentSet.root.aabb.a.y;
      currentSet.optimize;
      // writeln "Tree optimized";
      list ~= currentSet;
      bb.addBox(currentSet.root.aabb.(a, b));
      currentSet = new TriangleSet;
    }
    for auto line <- fusemtl {
      if auto rest = line.startsWith "f " {
        auto poly = rest.split " ";
        if (poly.length > 2)::
        auto tupAndFree(string[] st) { onSuccess st.free; return st[(0, 1)]; }
        if (rest.find("/")) {
          auto indices = [for
            pair <- [for pair <- [for part <- poly: tupAndFree part.split "/"]: (std.string.atoi pair[0] - 1, std.string.atoi pair[1] - 1)]:
            (vertices[pair[0]], texcoords[pair[1]])
          ].eval[];
          for (int i = 2; i < poly.length; ++i)
            currentSet.addTriangle (indices[(0, i, i-1)], currentTexture);
          if (currentSet.root.info.length > 1024)
            flush;
          indices.free;
        } else {
          auto indices = [for
            id <- [for index <- poly: std.string.atoi index - 1]:
            vertices[id]
          ].eval[];
          for (int i = 2; i < poly.length; ++i)
            currentSet.addTriangle (indices[0], vec2f(0), indices[i], vec2f(0), indices[i-1], vec2f(0), currentTexture);
          if (currentSet.root.info.length > 1024)
            flush;
          indices.free;
        }
        poly.free;
      }
      if auto rest = line.startsWith "usemtl " {
        currentTexture = lookupMatl rest;
      }
    }
    flush;
    obj.free;
    mtl.free;
    writeln "$(that.list.length) sub-objects";
    // writeln "$(infos.length) tris. ";
    object = bb;
  }
  
  fov = 1.1;
  
  using new Group {
    list ~= new Scale(1/4.0, new CheckerPattern(vec3f(1, 0.9, 0.6), vec3f(0.6, 0.9, 1), new Plane(vec3f(0, 1, 0), vec3f(0, 0, 0))));
    
    // list ~= new Scale(vec3f(-1, 1, -1), new EnvMap (readImage "OpenfootageNET_Beach_CavalinoItalylow.hdr", 1_000_000));
    
    // list ~= new Shine(vec3f(0.5), new Plane(vec3f(0, -1, 0), vec3f(0, 100, 0)));
    
    list ~= new CheckerPattern(vec3f(1, 0.9, 0.6), vec3f(0.6, 0.9, 1), new Plane(vec3f(0, 1, 0), vec3f(0, 0, 0)));
    list ~= new Translate(vec3f(1, -lowest / 25, 5), new Scale(vec3f(-1/25.0, 1/25.0, -1/25.0), object));
    // list ~= new Translate(vec3f(1, -lowest * 2, 1), new Scale(vec3f(2.5), object));
    // list ~= new Scale(vec3f(0.05), new Translate(vec3f(50, -lowest, 120), object));
    // scene = that;
  }
  
  if (break-on-float-errors)
    for auto val <- [FE_DIVBYZERO, FE_INVALID/*, FE_OVERFLOW I said infs are fine >_>*/]
      feenableexcept val;
  
  float ratio = 1;
  if (imgres[0]) ratio = imgres[0] * 1f / imgres[1];
  
  (int, int) desired-display-size;
  if (imgres[0] && imgres[1]) desired-display-size = imgres;
  
  getScale = \() -> 2.0f * vec2f(ratio, 1) / vec2f(desired-display-size);
  
  if (specfile) {
  } else {
    using new Group {
      list ~= new Plane(vec3f(0, 1, 0), vec3f(0, 0, 0));
      list ~= new Shine(vec3f(1), new Plane(vec3f(0, -1, 0), vec3f(0, 10, 0)));
      list ~= new Color(vec3f(1, 0.7, 0.7), new Plane(vec3f(1, 0, 0), vec3f(-8, 0, 0)));
      scene = that;
    }
    // if (jitter) {
      // scene = new AverageResults(samples, new JitterRay(&getScale, new PathTraceLighting(scene, new PathTraceLighting (scene, new PathTraceLighting scene))));
    // } else {
      // scene = new PathTraceLighting(samples, scene, new PathTraceLighting (scene, new PathTraceLighting scene));
    // }
    // scene = new PathTraceLighting(samples, scene, new PathTraceLighting(scene));
    // scene = new PlainLighting(scene);
    scene = new PathTraceLighting(samples, scene, depth);
    // scene = new MetropolisLighting(scene, depth, samples);
  }
  
  vec4f[] resbuffer;
  
  VMStats stats;
  stats.needsRay;
  auto stream = scene.buildCommandStream(&stats);
  stream ~= CommandHandler: null; // terminator
  vm.fullStream = stream;
  int rays-needed = stats.rays-needed-max;
  int results-needed = stats.results-needed-max;
  writeln "(ray, res): ($rays-needed, $results-needed): $(stream[0..$-1].length)";
  writeln "steps: $(stream.length - 1)";
  if (stream.length > 21) writeln "Last 20: $(stream[$-21..$-1])";
  else writeln "Stream: $(stream[0..$-1])";
  
  auto start = sec(), firststart = start;
  int iters; long rays;
  
  int xgroupsize = groupsize * stepsize;
  auto ray-res-vm-map = new (Ray[], Result[], VMState[])[] threads;
  void* align16(void* v) { return void*:(int:v + 15 #&-16); }
  void render(int thread, int id) {
    (dw, dh) = desired-display-size;
    alias my-ray-map = ray-res-vm-map[thread][0];
    alias my-res-map = ray-res-vm-map[thread][1];
    alias my-vm-map = ray-res-vm-map[thread][2];
    int count = groupsize;
    
    int from = id * xgroupsize, to = (id+1) * xgroupsize;
    
    using scoped recordResultDg::
    recordResultDg = delegate void(Ray* rayp, vec3f col, bool isBack, float factor, bool isMetroHit) {
      ray_to_coords(dw, dh, rayp, &int x, &int y);
      
      auto i = y * dw + x;
      if (i >= dw*dh || i < 0) return;
      // auto colf = value(col, isBack);
      float icolf;
      
      /*if (colf * factor < float combinedFactor = minBrightnessFactor / markovSteps) {
        icolf = factor / combinedFactor; // bound
      } else if (colf > 0.001) {
        icolf = 1 / colf;
      } else */icolf = 1;
      ref rb = resbuffer[i];
      auto coln = col * icolf;
      // writeln "record @$((x, y)): $(vec4f(coln.(x, y, z, icolf))) for $(col)";
      // writeln "at $((x, y)), record $(vec4f(coln.(x, y, z, icolf))) for $(col), adding to $(rb)";
      if (x == dbgPos[0] && y == dbgPos[1]) {
        writeln "at $((x, y)), record $(vec4f(coln.(x, y, z, icolf))) * $factor for $(col), adding to $(rb)";
      }
      rb += vec4f(coln.(x, y, z, icolf)) * factor;
    };
    // split into subfunctions for the benefit of the profiler.
    void setup() {
      auto xstream = stream;
      int resn = results-needed, rayn = rays-needed;
      // prealloc vm, results, rays
      if (my-vm-map.length != count + 1) {
        my-vm-map.free;
        my-vm-map = new VMState[] (count + 1);
      }
      if (my-ray-map.length != count * rayn + 1) {
        my-ray-map.free;
        my-ray-map = new Ray[] (count*rayn + 1);
      }
      if (my-res-map.length != count * resn + 1) {
        my-res-map.free;
        my-res-map = new Result[] (count*resn + 1);
      }
      Ray[] ray-slab = Ray*:align16(my-ray-map.ptr) #[0..my-ray-map.length - 1];
      Result[] res-slab = Result*:align16(my-res-map.ptr) #[0..my-res-map.length - 1];
      // memset(res-slab.ptr, 0, res-slab.length * size-of Result);
      // sabotage - enable if you suspect you have misbehaving objects
      // using uninitialized results. Or else just enable the memset above.
      /*for ref val <- res-slab using val {
        // distance = rand();
        // normal = (rand(), rand(), rand());
        // reflective-color = (rand(), rand(), rand());
        emissive-color = (rand(), rand(), rand());
        // data = rand();
        success = rand() % 2;
      }*/
      
      auto state = VMState*:align16(my-vm-map.ptr);
      
      (all_rayplanes, ray-slab) = ray-slab[(0..count * rayn, count * rayn .. $)];
      (all_resplanes, res-slab) = res-slab[(0..count * resn, count * resn .. $)];
      rayplane_size = count;
      resplane_size = count;
      
      int i;
      auto rayplane = rayplanes[0].ptr;
      for (int k <- from..to) {
        if (++i != stepsize) continue;
        i = 0;
        int x = k % dw, y = k / dw;
        coordsf_to_ray(dw, dh, x, y, rayplane);
        // float fx = x / (dw/2f) - 1f, fy = 1f - y / (dh/2f);
        state.stream = xstream;
        // state.state = 0;
        using state {
          result-id = 0;
          ray-id = 1;
          // auto dir = vec3f(fx, fy, 1);
          // dir /= vec3f(|dir|);
          // ray.pos = vec3f(0, 2, 0);
          // ray.dir = dir;
          // rayCache = vec3f 0;
          // cached = false;
          // cachedBack = false;
          // state2 = 0;
          // burnInCounter = burnInLimit; // for mlt
        }
        state ++;
        rayplane ++;
      }
    }
    void process() {
      check;
      auto rayqueue = VMState*:align16(my-vm-map.ptr) #[0..my-vm-map.length - 1];
      // writeln "PROCESS";
      int base;
      do {
        // This MUST proceed backwards! The handlers use i as index into the planes!
        while (rayqueue.length && !rayqueue[$-1].handler) rayqueue = rayqueue[0 .. $-1];
        while (base < rayqueue.length && !rayqueue[base].handler) base ++;
      } while (base < rayqueue.length) {
        auto hdl = rayqueue[base].stream.ptr;
        // writeln "was: $(*hdl)";
        int start = base, end = rayqueue.length;
        /*for (int i = end - 1; i >= start; --i) {
          auto rsp = rayqueue[i].stream.ptr;
          if int:rsp < int:hdl {
            hdl = rsp;
            end = i + 1;
          }
          if (rsp is hdl) {
            start = i;
          }
        }*/
        // writeln "is: $(*hdl)";
        /*int num;
        for auto rq <- rayqueue if int:rq.handler == int:*hdl num++;
        writeln "$(*hdl): $num out of $(rayqueue.length)";*/
        
        // writeln "$(*hdl) at $start .. $end";
        hdl.process (rayqueue, start, end);
      }
      // writeln "END";
    }
    setup();
    process();
  }
  
  auto lp = new LoopPool threads;
  
  // debug code
  // imgres[(0, 1)] = (80, 60);
  // desired-display-size = imgres;
  
  if (imgres[0] && imgres[1]) {
    
    resbuffer = new vec4f[] (imgres[0] * imgres[1]);
    // so that xyz/w doesn't error
    resbuffer[] = [for 0..resbuffer.length: vec4f.W * 0.0001];
    
    auto surf = screen(imgres, surface => true);
    writeln "Calculate $(imgres). ";
    bool done; int parts-done;
    dw = imgres[0]; dh = imgres[1];
    void saveAs(string file, bool finalCall = false) {
      float avg_w = 0; int sum;
      for (int k <- 0..dw*dh) {
        if (resbuffer[k].(w != 1 && w > 0)) {
          avg_w += resbuffer[k].w;
          sum ++;
        }
      }
      if (!sum) {
        writeln "Too early to save file.";
        return;
      }
      avg_w /= sum;
      /*float max_x = 0;
      for (int k <- 0..dw*dh) {
        if (auto x = resbuffer[k].x) > max_x max_x = x;
      }
      if (max_x == 0f) max_x = 1;*/
      if (file.endsWith(".hdr")) {
        auto colbuffer = new vec3f[] (dw * dh);
        if (average) {
          for (int k <- 0..dw*dh) {
            colbuffer[k] = resbuffer[k].(xyz/avg_w);
          }
        } else {
          for (int k <- 0..dw*dh) {
            colbuffer[k] = resbuffer[k].(xyz/w);
          }
        }
        auto data = encodeHDR(colbuffer, dw, dh);
        colbuffer.free;
        writeAll(file, data);
        data.free;
        return;
      }
      auto gdp = gdImageCreateTrueColor(imgres);
      onSuccess gdImageDestroy gdp;
      for (int k <- 0..dw*dh) {
        vec3f col;
        if (average) {
          col = resbuffer[k].(xyz/avg_w);
        } else {
          col = resbuffer[k].(xyz/w);
        }
        float maxf(float a, b) return [a, b][b > a];
        if (col.(maxf(x, maxf(y, z))) > 1)
          col /= col.(maxf(x, maxf(y, z)));
        // col = resbuffer[k].xxx / max_x;
        int x = k % dw, y = k / dw;
        gdp.tpixels[y][dw - 1 - x] = floatToIntColor col;
      }
      auto hdl = fopen (file.toStringz(), "w");
      gdImagePng(gdp, c.gd.FILE*: hdl);
      fclose hdl;
    }
    int framenum;
    void save(bool finalCall = false) {
      if (saveFrames && !finalCall) {
        string framestr = "$framenum";
        while (framestr.length < 5) framestr = "0$framestr";
        saveAs(file.between("", ".", =>reverse-search)~
               ".$framestr."~
               file.between(".", "", =>reverse-search));
        framenum ++;
      }
      saveAs(file, finalCall);
    }
    (auto up = new ThreadPool 1).addTask delegate void() {
      auto start = sec();
      while !done {
        auto t = sec(), delta = float:(t - start);
        if (parts-done) {
          int num-parts = (dw * dh) / xgroupsize;
          writeln "$(int:delta)s: $(parts-done * 100 / num-parts)% done, est. $(int:(delta * num-parts / parts-done - delta))s left. ";
        }
        save();
        sleep savestep;
      }
    };
    int len = (imgres[0] * imgres[1]) / xgroupsize;
    int[] randmap = [for i <- 0..len: i].eval[];
    for int i <- 0..len swap randmap[i], randmap[i..$][rand()%$]; // fisher-yates shuffle
    lp.runLoop(len, delegate void(int id, thr) {
      set-handler (UnrecoverableError uerr) {
        writeln "$(read-pretty-fcc-backtrace())\n$uerr. Aborting. ";
        asm `int $3`;
      }
      render(thr, id/*randmap[id]*/);
      parts-done ++;
    });
    done = true;
    up.waitComplete;
    writeln "Save. (processed $c__3, succeeded $c__ - registered $c__2)";
    save(true);
    return;
  }
  
  auto resbuffer-lock = new ReadWriteLock;
  
  auto surf = screen(512, 300, surface => true);
  desired-display-size = surf.(w, h);
  
  resbuffer = new vec4f[] surf.(w * h);
  resbuffer[] = [for 0..resbuffer.length: vec4f.W];
  
  onResize(800, 800);
  bool stop;
  using new ThreadPool 1::
  addTask delegate void() {
    auto last-printed = sec();
    while !stop {
      resbuffer-lock.lock-read();
        auto rdg = &render;
        auto ddsx = desired-display-size[0], ddsy = desired-display-size[1], xgroupsize = xgroupsize;
        int total = (ddsx * ddsy) / xgroupsize;
        writeln "run loop to $total: $ddsx $ddsy $xgroupsize";
        lp.runLoop(total, delegate void(int id, thr) {
          set-handler (UnrecoverableError uerr) {
            writeln "$(read-pretty-fcc-backtrace())\n$uerr. Aborting. ";
            invoke-exit "exit";
          }
          define-exit "exit" { exit(1); }
          rdg(thr, id);
        });
        writeln "done";
      resbuffer-lock.unlock();
      iters ++;
      rays += surf.(w*h);
      // render();
      auto delta = float:(sec() - start);
      auto fulldelta = float:(sec() - firststart);
      float fps;
      if (delta > 0) fps = iters / delta;
      else fps = 0.001; // eps
      // reconfigure window size to reach target fps
      import c.math;
      float pixelfactor = desired-fps / fps, psq = sqrtf pixelfactor;
      float absf(float f) { if (f < 0) return -f; return f; }
      if (float:(sec() - last-printed) > 5) {
        writeln "[fps $fps] [wanted $desired-fps] [res $desired-display-size] [speed $(surf.(w*h) * iters / delta / 1_000_000)mrps] [full speed $(double:rays / fulldelta / 1_000_000)mrps]";
        last-printed = sec();
      }
      if (absf (pixelfactor - 1) > 0.05 && delta > 1) {
        if (psq < 0.7) psq = 0.7;
        (int, int) updated-size = (int:(surf.w / psq), int:(surf.h / psq));
        updated-size = (updated-size[0] / 10 #* 10, updated-size[1] / 10 #* 10);
        if (updated-size[0] != desired-display-size[0] && updated-size[1] != desired-display-size[1]) {
          resbuffer-lock.lock-write();
            desired-display-size = updated-size;
            resbuffer.free;
            resbuffer = new vec4f[] (updated-size[0] * updated-size[1]);
            resbuffer[] = [for 0..resbuffer.length: vec4f.W * 0.0001]; // so that xyz/w doesn't error
          resbuffer-lock.unlock();
        }
        // reset estimation
        iters = 0; start = sec();
      }
    }
  }
  set-handler(Error err) {
    writeln "$err. Exiting. ";
    invoke-exit "main-return";
  }
  define-exit "main-return" {
    stop = true;
    waitComplete;
    return;
  }
  auto begin = sec();
  int tex;
  glGenTextures(1, &tex);
  onSuccess glDeleteTextures(1, &tex);
  while (true) {
    auto start-draw = sec();
    resbuffer-lock.lock-read();
    dw = surf.w; dh = surf.h;
    scope colors = new vec3f[] (dw*dh);
    for (int k <- 0..dw*dh) {
      auto col = resbuffer[k].(xyz/w);
      float maxf(float a, b) return [a, b][b > a];
      if (col.(maxf(x, maxf(y, z))) > 1)
        col /= col.(maxf(x, maxf(y, z)));
      colors[k] = col;
    }
    resbuffer-lock.unlock();
    using mode GL {
      Viewport (0, 0, display.(w, h));
      MatrixMode PROJECTION;
      LoadIdentity;
      MatrixMode MODELVIEW;
      LoadIdentity;
      using TEXTURE_2D {
        Enable;
        BindTexture tex;
        TexParameteri(TEXTURE_MIN_FILTER, NEAREST);
        TexParameteri(TEXTURE_MAG_FILTER, NEAREST);
        TexImage2D (0, 3, dw, dh, 0, RGBA, FLOAT, colors.ptr);
      }
      ClearColor (1, 1, 0, 0);
      Clear (COLOR_BUFFER_BIT | DEPTH_BUFFER_BIT);
      
      using Quads {
        Vertex2f( 1, -1); TexCoord2f(0, 0);
        Vertex2f( 1,  1); TexCoord2f(1, 0);
        Vertex2f(-1,  1); TexCoord2f(1, 1);
        Vertex2f(-1, -1); TexCoord2f(0, 1);
      }
    }
    surf.surf.flip;
    SDL_GL_SwapBuffers();
    flip;
    if (mouse-clicked) writeln "click: $(mouse-pos)";
    auto end-draw = sec();
    auto should-take = 1f / desired-fps, delta = should-take-end-draw+start-draw /* abusive */;
    if (should-take > 0)
      sleep should-take;
    if (surf.(w != desired-display-size[0] || h != desired-display-size[1])) {
      surf = screen (desired-display-size, surface => true);
    }
  }
}
