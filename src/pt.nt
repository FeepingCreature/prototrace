module pt;

platform(i686-mingw32) {
  pragma(lib, "png");
  pragma(lib, "jpeg");
}

platform(arm-*) {
  pragma(lib, "png");
  pragma(lib, "z");
  pragma(lib, "jpeg");
}

import std.(file, process, getopt, string, boehm, wren);
import sdl, c.fenv;

import render, settings, unforth, unforth_pt;

import scene.(base, group, plane, color, lighting/*, metro*/);

void stackdump(UnforthContext context) using context {
  void dumpReverse(Thing[] stack) {
    for (int i = stack.length - 1; i >= 0; --i) {
      auto thing = stack[i];
      if (auto pre = wren-to-neat!PreHandler thing) {
        scope array = pre.flatten();
        writeln $ " ["~[for thing <- array: "$thing"].join(",")~"]";
      }
      else if (is-nil thing) writeln " false";
      else if (is-t thing) writeln " true";
      else writeln " $thing";
    }
  }
  if (context.vstack.length) writeln "--vstack tip--";
  dumpReverse context.vstack[];
  if (context.datastack.length) writeln "--stack tip--";
  dumpReverse context.datastack[];
}

extern(C) { void GC_disable(); void GC_gcollect(); void GC_enable(); }
void main(string[] args) {
  int ib = 0;
  auto dg = writefile "branches.prof";
  import std.thread;
  auto bp_mut = new Mutex;
  _record_branch = λ(int id, int outcome) {
    using LockedMutex:bp_mut {
      if (ib++ < 1009) return;
      ib = 0;
      dg ubyte[]: scope= "$id $outcome\n";
    }
  };
  set-handler (Error err) { writeln "$(read-pretty-fcc-backtrace())\n$err. Aborting. "; invoke-exit "exit"; }
  define-exit "exit" exit(1);
  platform(*-mingw*) { args = executable.split " "; }
  
  break-on-float-errors = true;
  fov = 0.75;
  projscale = 1;
  bool readinput;
  bool debugMode;
  
  using new Options using settings {
    addLong("average",     "a", λ average = true; );
    addLong("minbrightnessfactor", "b", λ(string s) minBrightnessFactor = atof s; );
    addLong("count",       "c", λ(string s) count = atoi s; );
    addLong("depth",       "d", λ(string s) depth = atoi s; );
    addLong("savestep",    "e", λ(string s) savestep = atof s; );
    addLong("fps",         "f", λ(string s) desired-fps = std.string.atof s; );
    addLong("groupsize",   "g", λ(string s) groupsize = atoi s;);
    addLong("help",        "h", λ{ printHelp; exit 0; });
    addLong("input",       "i", λ(string s) input = s;);
    addLong("readinput",   "j", λ readinput = true;); // j was free
    addLong("keepgoing",   "k", λ break-on-float-errors = false; );
    addLong("burninlimit", "l", λ(string s) burnInLimit = atoi s; );
    addLong("markovsteps", "m", λ(string s) markovSteps = atoi s; );
    addLong("boehm",       "n", λ useBoehm = true; );
    addLong("output",      "o", λ(string s) file = s; );
    addLong("projscale",   "p", λ(string s) projscale = std.string.atof s; );
    addLong("res",         "r", λ(string s) using s.split "x" imgres = (atoi that[0], atoi that[1]); );
    addLong("samples",     "s", λ(string s) samples = atoi s; );
    addLong("threads",     "t", λ(string s) threads = atoi s; );
    addLong("rcache",      "u", λ enableRCache = true; );
    addLong("fov",         "v", λ(string s) fov = atof s; );
    // addLong("noLensmut",   "x", λ allowLensmut = false; );
    addLong("saveframes",  "y", λ saveFrames = true; );
    addLong("debugmode",   "z", λ debugMode = true; );
    args = process args;
    if (!file) assert(!count, "'count' option undefined for screen rendering");
  }
  if (settings.useBoehm)
    initBoehm (debugMode => true);
  
  onResize = delegate void(int w, int h) {
    screen(w, h, flags => SDL_OPENGL | SDL_RESIZABLE | SDL_ANYFORMAT);
  };
  
  bool res_specified = settings.imgres.(_0 && _1);
  
  SceneObject scene;
  
  platform(!*-mingw*) {
    if (break-on-float-errors)
      for auto val <- [FE_DIVBYZERO, FE_INVALID/*, FE_OVERFLOW I said infs are fine >_>*/]
        feenableexcept val;
  }
  
  if (settings.input || readinput) {
    
    auto context = new UnforthContext;
    
    setupDefaultWords(context);
    setupPtWords(context);
    
    context.define_builtin("render", new λ using context {
      auto pre = pop!PreHandler();
      auto stream = pre.flatten();
      dumpTree(pre);
      configureStream stream;
      stackdump;
      writeln "--render--";
      if (res_specified)
        renderSceneToFile;
      else {
        platform(default) {
          renderSceneToScreenDynamic;
        }
        platform(arm-*) {
          assert(false, "no gl out");
        }
      }
    });
    
    // import std.lib.libedit;
    // setPrompt("pt> ");
    if (exists "defs.uf") context.load "defs.uf";
    
    if (settings.input) {
      context.execute splitme settings.input;
      return;
    }
    
    // auto input = reader();
    // onExit input.close;
    
    string lastline;
    // for auto line <- input {
    while (true) {
      printf("pt> ");
      auto line = readln();
      line = line.dup; // lol memory
      if (line == "quit") { writeln "Goodbye. "; exit(0); }
      if (line[0] == "^") line = lastline ~ line[1..$];
      // input.addHistory line;
      set-handler (UnforthError ue) {
        writeln "! $(ue.ufmsg)";
        stackdump context;
        invoke-exit "continue";
      }
      set-handler (WrenError we) {
        writeln "? $we";
        invoke-exit "continue";
      }
      define-exit "continue" continue;
      // reset
      context.reset();
      context.execute (splitme line, => repl, =>verbose);
      context.save "defs.uf";
      stackdump context;
      line = lastline;
    }
    return;
  } else {
    using new Group {
      list ~= new Plane(vec3f(0, 1, 0), vec3f(0, 0, 0));
      list ~= new Shine(vec3f(1), new Color(vec3f(0), new Plane(vec3f(0, -1, 0), vec3f(0, 10, 0))));
      list ~= new Color(vec3f(1, 0.7, 0.7), new Plane(vec3f(1, 0, 0), vec3f(-8, 0, 0)));
      scene = that;
    }
    // if (jitter) {
      // scene = new AverageResults(samples, new JitterRay(&getScale, new PathTraceLighting(scene, new PathTraceLighting (scene, new PathTraceLighting scene))));
    // } else {
      // scene = new PathTraceLighting(samples, scene, new PathTraceLighting (scene, new PathTraceLighting scene));
    // }
    // scene = new PathTraceLighting(samples, scene, new PathTraceLighting(scene));
    // scene = new PlainLighting(scene);
    scene = new PathTraceLighting(settings.samples, scene, settings.depth);
    // scene = new MetropolisLighting(scene, depth, samples);
  }
  
  auto stream = scene.buildCommandStream();
  configureStream stream;
  
  if (settings.imgres.(_0 && _1)) {
    renderSceneToFile;
    return;
  }
  platform(default) {
    renderSceneToScreenDynamic;
  }
  platform(arm-*) {
    assert(false, "no gl out");
  }
}
