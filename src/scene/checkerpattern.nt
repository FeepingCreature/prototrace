module scene.checkerpattern;

import scene.base;

class CheckerPattern : CommandHandler {
  vec3f a, b;
  bool emissive;
  void init(vec3f a, b, bool emissive) { this.(a, b, emissive) = (a, b, emissive); }
  override {
    void recordEffect(VMStats* stats) { }
    bool irregularStep() { return false; }
    void process(VMState[] list, int from, to) {
      for int i <- from..to {
        ref sp = list[i];
        
        if (sp.handler !is CommandHandler:this) fail;
        sp.stream = sp.stream[1..$];
        
        ref res = resplanes[sp.result-id][i];
        if (res.success) {
          float effdist = res.distance;
          if (res.distance == float.infinity) effdist = float.max; // whuh
          ref ray = rayplanes[sp.ray-id][i];
          auto hitpos = ray.(pos + dir * effdist);
          bool checker = bool:((hitpos - hitpos.(vec3f(floor x, floor y, floor z))) * 2).(int:x & 1 xor int:y & 1 xor int:z & 1);
          if (emissive) res.emissive-color = [a, b][checker];
          else res.reflective-color = [a, b][checker];
        }
      }
    }
  }
}

class PreCheckerPattern : PreHandler {
  vec3f a, b;
  bool emissive;
  PreHandler base;
  void init(PreHandler base, vec3f a, b, bool emissive) this.(base, a, b, emissive) = (base, a, b, emissive);
  override void iterate(void delegate(PreHandler) dg) { dg base; }
  override CommandHandler[] flatten() { return (scope= base.flatten()) ~ new CheckerPattern(a, b, emissive); }
}

PreHandler mkCheckerPattern(vec3f a, b, bool emissive, PreHandler base) { return new PreCheckerPattern(base, a, b, emissive); }
