module scene.color;

import scene.base;

// used for purely emissive surfaces, like sky or lamps
class Shine : SceneObject, CommandHandler {
  SceneObject sup;
  vec3f col;
  void init(vec3f col, SceneObject so) { sup = so; this.col = col; }
  bool collide(Ray* ray, Result* res) { raise new Error "Shine::collide not implemented! "; }
  override {
    string toString() return "Shine\t$col";
    void process(VMState[] list, int start, end) {
      auto self = CommandHandler:this;
      for int i <- start..end {
        ref sp = list[i];
        
        if (sp.handler !is self) continue;
        sp.stream = sp.stream[1..$];
        
        ref res = resplanes[sp.result-id-1][i];
        res.emissive-color = col;
        res.reflective-color = vec3f(0);
      }
    }
    void recordEffect(VMStats* stats) { }
    CommandHandler[] buildCommandStream() {
      return sup.buildCommandStream() ~ this;
    }
  }
}

class Color : SceneObject, CommandHandler {
  SceneObject sup;
  vec3f col;
  void init(vec3f col, SceneObject so) { sup = so; this.col = col; }
  bool collide(Ray* ray, Result* res) { raise new Error "Color::collide not implemented! "; }
  override {
    string toString() return "Color\t$col";
    void process(VMState[] list, int start, end) {
      auto col = col;
      for int i <- start..end {
        ref sp = list[i];
        
        if (sp.handler !is CommandHandler:this) continue;
        sp.stream = sp.stream[1..$];
        
        ref res = resplanes[sp.result-id-1][i];
        res.reflective-color = col;
        res.emissive-color = vec3f(0);
      }
    }
    void recordEffect(VMStats* stats) { }
    CommandHandler[] buildCommandStream() {
      return sup.buildCommandStream() ~ this;
    }
  }
}
