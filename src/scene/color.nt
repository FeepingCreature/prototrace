module scene.color;

import scene.base;

class PreShine : PreHandler {
  vec3f color;
  PreHandler base;
  void init(vec3f color, PreHandler base) this.(color, base) = (color, base);
  override string toString() { return "PreShine $color"; }
  override void iterate(void delegate(PreHandler) dg) { dg base; }
  override CommandHandler[] flatten() { return (scope= base.flatten()) ~ new Shine(color, null); }
}

PreHandler mkShine(vec3f color, PreHandler base) return new PreShine(color, base);

// used for purely emissive surfaces, like sky or lamps
class Shine : SceneObject, CommandHandler {
  SceneObject sup;
  vec3f col;
  void init(vec3f col, SceneObject so) { sup = so; this.col = col; }
  bool collide(Ray* ray, Result* res) { raise new Error "Shine::collide not implemented! "; }
  override {
    bool irregularStep() { return false; }
    string toString() return "Shine\t$col";
    void process(VMState[] list, int start, end) {
      auto self = CommandHandler:this;
      for int i <- start..end {
        ref sp = list[i];
        
        if (sp.handler !is self) continue;
        sp.stream = sp.stream[1..$];
        
        // printf("debug: %p %p\n", this, &col);
        
        ref res = resplanes[sp.result-id][i];
        res.emissive-color = col;
        // res.reflective-color = vec3f(0);
      }
    }
    void recordEffect(VMStats* stats) { }
    CommandHandler[] buildCommandStream() {
      return sup.buildCommandStream() ~ this;
    }
  }
}

class PreColor : PreHandler {
  vec3f color;
  PreHandler base;
  void init(vec3f color, PreHandler base) this.(color, base) = (color, base);
  override string toString() { return "PreColor $color"; }
  override void iterate(void delegate(PreHandler) dg) { dg base; }
  override CommandHandler[] flatten() { return (scope= base.flatten()) ~ new Color(color, null); }
}

PreHandler mkColor(vec3f color, PreHandler base) return new PreColor(color, base);

class Color : SceneObject, CommandHandler {
  SceneObject sup;
  vec3f col;
  void init(vec3f col, SceneObject so) { sup = so; this.col = col; }
  bool collide(Ray* ray, Result* res) { raise new Error "Color::collide not implemented! "; }
  override {
    bool irregularStep() { return false; }
    string toString() return "Color\t$col";
    void process(VMState[] list, int start, end) {
      auto col = col;
      for int i <- start..end {
        ref sp = list[i];
        
        if (sp.handler !is CommandHandler:this) continue;
        sp.stream = sp.stream[1..$];
        
        ref res = resplanes[sp.result-id][i];
        res.reflective-color = col;
        // res.emissive-color = vec3f(0);
      }
    }
    void recordEffect(VMStats* stats) { }
    CommandHandler[] buildCommandStream() {
      return sup.buildCommandStream() ~ this;
    }
  }
}
