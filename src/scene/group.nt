module scene.group;

import scene.base;

class MergeTwo : CommandHandler {
  bool empty;
  void init(bool e = false) empty = e;
  override void recordEffect(VMStats* stats) {
    stats.consumesResult;
  }
  override void process(VMState[] list, int start, end) {
    if (empty) {
      for int i <- start .. end {
        ref sp = list[i];
        if (sp.handler !is CommandHandler:this) continue;
        sp.stream = sp.stream[1..$];
        
        sp.result-id ++;
        resplanes[sp.result-id-1][i].success = 0;
      }
      return;
    }
    for int i <- start .. end {
      ref sp = list[i];
      if (sp.handler !is CommandHandler:this) continue;
      sp.stream = sp.stream[1..$];
      
      ref res1 = resplanes[sp.result-id-1][i];
      if (!res1.success) { }
      else {
        ref res2 = resplanes[sp.result-id-2][i];
        if (!res2.success) {
          res2 = res1;
        } else {
          if (res2.distance <= res1.distance) { }
          else res2 = res1;
        }
      }
      sp.result-id --;
    }
  }
}

class Group : SceneObject {
  SceneObject[] list;
  string toString() { return "Group<$(list.length)>"; }
  bool collide(Ray* ray, Result* res) { assert(false); }
  override {
    CommandHandler[] buildCommandStream() {
      CommandHandler[auto~] res;
      res ~= list[0].buildCommandStream();
      for auto obj <- list[1..$] {
        res ~= obj.buildCommandStream();
        res ~= new MergeTwo (!this.list.length);
      }
      return res[];
    }
  }
}
