module scene.lighting;

import scene.base, scene.util;

class LightStep : CommandHandler {
  vec3f* lightpos;
  int numBasicSteps;
  void init(vec3f* lp, int n) { lightpos = lp; numBasicSteps = n; }
  class LightMergeStep : CommandHandler {
    override void recordEffect(VMStats* stats) {
      stats.consumesRay;
      stats.consumesResult;
    }
    override void process(VMState[] list, int start, end) {
      for int i <- start .. end {
        auto sp = &list[i];
        
        if (void*:sp.handler == void*:CommandHandler:this)::
        sp.stream = sp.stream[1..$];
        
        ref res = resplanes[sp.result-id-2][i];
        if (res.success) {
          ref ray1 = rayplanes[sp.ray-id-1][i];
          ref ray2 = rayplanes[sp.ray-id-2][i];
          vec3f lightdir = (*lightpos) - ray1.pos;
          float lightdist = |lightdir|;
          lightdir = lightdir.normalized;
          auto norm = res.normal;
          if ((norm * ray2.dir).sum > 0)
            norm = -norm;
          vec3f lightprod = lightdir * norm;
          float lightangle = lightprod.sum;
          
          vec3f resv = vec3f(0);
          auto res2 = &resplanes[sp.result-id-1][i];
          if (lightangle >= 0 && (!res2.success || res2.distance >= lightdist))
            resv = res.reflective-color * vec3f(lightangle);
          
          res.emissive-color += resv;
        }
        using sp mixin(freeResult.replace("!!", "1"));
        using sp mixin(freeRay.replace("!!", "1"));
      }
    }
  }
  LightMergeStep mkMergeStep() { return new LightMergeStep; }
  override void recordEffect(VMStats* stats) {
    stats.addsRay;
  }
  override void process(VMState[] list, int start, end) {
    for int i <- start .. end {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      auto res = &resplanes[sp.result-id-1][i];
      if (res.success) {
        auto ray = &rayplanes[sp.ray-id-1][i];
        auto nspos = ray.(pos + dir * (res.distance * EPS));
        // writeln "nspos = $(sp.ray.(pos, dir)) @ $(res.distance) = $(nspos), lightpos $(*lightpos)";
        using sp mixin(allocRay);
        vec3f lightdir = ((*lightpos) - nspos).normalized;
        ray = &rayplanes[sp.ray-id-1][i];
        ray.(pos, dir) = (nspos, lightdir);
      } else {
        using sp mixin(allocRay);
        using sp mixin(allocResult);
        sp.stream = sp.stream[numBasicSteps .. $]; // skip
      }
    }
  }
}

void generateOutRay(Ray* ray, Ray* prev-ray, vec3f start, Result* resinfo) {
  ray.(pos, dir) = (start, rand_sphere());
  auto normal = resinfo.normal;
  // flip the normal if we approached the surface from the "backside"
  // this accounts for things like triangle models where a triangle may be visible from both sides
  // on an unrelated note, fuck those bullshit models
  if ((normal * prev-ray.dir).sum >= 0)
    normal = -normal;
  
  if (ray.dir * normal).sum < 0 ray.dir = -ray.dir;
}

class PathTraceStep : CommandHandler {
  int skip, res-delta;
  int skip-start;
  void init(int rd = 0) { res-delta = rd; skip-start = -1; skip = -1; }
  void startTracking(int at) {
    skip-start = at;
  }
  class PathTraceMergeStep : CommandHandler {
    override void recordEffect(VMStats* stats) { }
    override void process(VMState[] list, int start, end) {
      for int i <- start .. end {
        ref  sp = list[i];
        
        if (sp.handler !is CommandHandler:this) continue;
        sp.stream = sp.stream[1..$];
        
        ref res = resplanes[sp.result-id-2][i];
        if (res.success) {
          ref res2 = resplanes[sp.result-id-1][i];
          if (res2.success) {
            res.emissive-color += res.reflective-color * res2.emissive-color;
          } else {
            // res.emissive-color += vec3f(1, 0, 0);
          }
        }
      }
    }
  }
  void stopTracking(int at) {
    assert(skip-start != -1);
    auto delta = (at - skip-start);
    skip = delta;
  }
  auto mkMergeStep() {
    assert(skip != -1);
    return new PathTraceMergeStep;
  }
  override void recordEffect(VMStats* stats) {
    stats.addsRay;
  }
  override void process(VMState[] list, int start, end) {
    auto self = CommandHandler:this;
    for int i <- start .. end {
      ref sp = list[i];
      
      if (sp.handler !is self) continue;
      sp.stream = sp.stream[1..$];
      
      using sp mixin(allocRay);
      
      ref res = resplanes[sp.result-id-1 - res-delta][i];
      if (res.success && res.reflective-color != vec3f(0)) {
        ref ray = rayplanes[sp.ray-id-2][i];
        ref ray2 = rayplanes[sp.ray-id-1][i];
        auto nspos = ray.(pos + dir * (res.distance * EPS));
        // writeln "nspos = $(ray.(pos, dir)) @ $(res.distance) = $(nspos)";
        generateOutRay(&ray2, &ray, nspos, &res);
      } else {
        using sp mixin(allocResult);
        ref res2 = resplanes[sp.result-id-1][i];
        res2.success = false;
        sp.stream = sp.stream[skip .. $]; // no point
      }
    }
  }
}

class LightSource : SceneObject {
  SceneObject sup;
  vec3f* ls;
  void init(vec3f* ls, SceneObject sup) this.(ls, sup) = (ls, sup);
  CommandHandler[] buildCommandStream() {
    auto stream = sup.buildCommandStream();
    using new LightStep(ls, stream.length)
      return stream ~ that ~ stream ~ mkMergeStep();
  }
}

template memo(T) {
  auto memo(T t) {
    alias PT = ParamTypes T, RT = ReturnType T;
    import std.hashmap;
    Hashmap!(PT, RT) map;
    return new λ(PT pt) {
      if (auto p = map.get(&pt)) return *p;
      auto res = t pt;
      map.insert(&pt, &res);
      return res;
    }
  }
}

CommandHandler[] mkPathTraceLighting(CommandHandler[] first, rest, int samples, depth) {
  if (!rest) rest = first;
  CommandHandler[auto~] res;
  
  res ~= first; // results ++
  CommandHandler[] buildChain(int depth) {
    CommandHandler[auto~] res;
    PathTraceStep[auto~] steps; // track them forward ..
    for 0..depth {
      auto pts = new PathTraceStep; // rays ++
      
      steps ~= pts;
      res ~= pts;
      pts.startTracking(res.length);
      res ~= rest; // results ++
    }
    
    for int i <- 0..depth {
      ref step = steps[$-1 - i];
      step.stopTracking(res.length + 1); // skip the merge step also
      res ~= step.mkMergeStep();
      res ~= new FreeResult; // results --
      res ~= new FreeRay; // rays --
    }
    // summary: neutral
    return res[];
  }
  assert(depth >= 1);
  if (samples == 1) {
    res ~= buildChain depth;
  } else {
    auto pt = new PathTraceStep(2 /* skip two results (our empty averager and the counter) */);
    auto fr = new FreeRay;
    // skip one result that we're using as a store for the loop counter
    auto as = new AverageStep (samples, 1);
    auto fs = new FreeResult;
    res ~= new AllocEmptyResult; // loop counter - results ++
    
    res ~= new AllocEmptyResult; // results ++
    
    auto buildChainMemo = memo &buildChain;
    res ~= repeat(1 /* counter is one deep */, samples, λ{
      CommandHandler[auto~] res;
      res ~= pt; // rays ++
      pt.startTracking(res.length);
      res ~= rest; // results ++
      res ~= buildChainMemo(depth - 1);
      res ~= as;
      pt.stopTracking(res.length);
      res ~= fr; // rays --
      res ~= fs; // results --
      return res[];
    });
    res ~= new SwapAndDiscardRes; // results --
    res ~= pt.mkMergeStep();
    res ~= fs; // results --
    // neutral
  }
  res ~= new RecordResultStep;
  return res[];
}

class PathTraceLighting : SceneObject {
  SceneObject sup, sup2; int avg, depth;
  void init(SceneObject sup, int depth) { init(1, sup, sup, depth); }
  void init(SceneObject sup, sup2, int depth) { init(1, sup, sup, depth); }
  void init(int avg, SceneObject sup, int depth) { init(avg, sup, sup, depth); }
  void init(int avg, SceneObject sup, sup2, int depth) this.(sup, sup2, avg, depth) = (sup, sup2, avg, depth);
  override CommandHandler[] buildCommandStream() {
    return mkPathTraceLighting(sup.buildCommandStream(), sup2?.buildCommandStream(), avg, depth)
         ~ new RecordResultStep;
  }
}

class PlainLighting : SceneObject {
  SceneObject sup;
  void init(SceneObject sup) this.sup = sup;
  CommandHandler[] buildCommandStream() {
    auto stream = sup.buildCommandStream();
    
    CommandHandler[auto~] res;
    res ~= stream;
    res ~= new RecordResultStep;
    return res[];
  }
}
