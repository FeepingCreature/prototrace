module scene.matrix;

import scene.base;

import std.matrix;

class MatrixOp : CommandHandler {
  Matrix4x4 matrix, invmatrix;
  void init(Matrix4x4* matp) { this.matrix = *matp; this.invmatrix = *matp; this.invmatrix.invert; }
  override {
    void process(VMState[] list, int start, end) {
			auto invmatrix = invmatrix;
      for int i <- start .. end {
        auto sp = &list[i];
        
        if (sp.handler !is this) fail;
        sp.stream = sp.stream[1..$];
        
        ref ray = rayplanes[sp.ray-id][i];
        using sp mixin(allocRay);
        
        // apply inverse transform to camera
        rayplanes[sp.ray-id][i].(pos, dir) = ray.(invmatrix.multiply(pos, w => 1), invmatrix.multiply(dir, w => 0));
      }
    }
    bool irregularStep() { return false; }
    void recordEffect(VMStats* stats) { stats.addsRay(); }
  }
  class PostMatrixOp : CommandHandler {
    override {
      void process(VMState[] list, int start, end) {
				auto matrix = matrix;
        for int i <- start .. end {
          auto sp = &list[i];
          
          if (sp.handler !is this) fail;
          sp.stream = sp.stream[1..$];
          
          using sp mixin(freeRay.replace("!!", "1"));
          
          ref rp = resplanes[sp.result-id][i];
          // apply forward transform to normal
          rp.normal = matrix.multiply(rp.normal, w => 0);
        }
      }
      bool irregularStep() { return false; }
      void recordEffect(VMStats* stats) { stats.consumesRay(); }
    }
  }
  PostMatrixOp mkPostMatrixOp() { return new PostMatrixOp; }
}

CommandHandler[] buildMatrixOp(Matrix4x4* matp, CommandHandler[] obj) {
  CommandHandler[auto~] res;
  auto rt = new MatrixOp(matp);
  res ~= rt;
  res ~= obj;
  res ~= rt.mkPostMatrixOp();
  return res[];
}

class PreMatrix : PreHandler {
  Matrix4x4 mat;
  PreHandler sub;
  void init(Matrix4x4* mat, PreHandler sub) this.(mat, sub) = (*mat, sub);
  override void iterate(void delegate(PreHandler) dg) { dg sub; }
  override CommandHandler[] flatten() { return buildMatrixOp(&mat, scope= sub.flatten()); }
}

PreHandler mkMatrixOp(Matrix4x4* mat, PreHandler sub) { return new PreMatrix(mat, sub); }
