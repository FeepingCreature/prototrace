module scene.metro;

import scene.(base, util, lighting);

bool allowLensmut;

class MetropolisLighting : SceneObject {
  CommandHandler[] sup; int samples, depth;
  void init(CommandHandler[] sup) {
    this.(sup, depth, samples) = (sup, 3, 16);
  }
  void init(CommandHandler[] sup, int dep, int samples) {
    this.(sup, depth, samples) = (sup, dep, samples);
  }
  class MetropolisStep : CommandHandler {
    int stepsToRewind;
    int firstRay, firstRes, skip;
    bool irregularStep() { return true; }
    void recordEffect(VMStats* stats) { }
    class Mutate1 : CommandHandler {
      int firstRay, firstRes, skip;
      void init(int firstId, firstResId, skipLen) (firstRay, firstRes, skip) = (firstId, firstResId, skipLen);
      bool irregularStep() { return false; }
      void recordEffect(VMStats* stats) { stats.addsRay(); }
      void process(VMState[] list, int from, to) {
        bool allowLensmut = allowLensmut;
        for int i <- from..to {
          auto sp = &list[i];
          
          if (void*:sp.handler == void*:CommandHandler:this)::
          sp.stream = sp.stream[1..$];
          
          auto ray = &rayplanes[firstRay][i];
          auto res = &resplanes[firstRes][i];
          
          int whichCase;
          
          int caseId = rand() % 100;
          if (allowLensmut && caseId < 80) whichCase = 1; // lensmut
          else if (false && caseId < 90) whichCase = 2; // tailmut
          
          if (whichCase == 1) {
            sp.state = 0; // lens mutation
            ray_to_coordsf(dw, dh, ray, &float fx, &float fy);
            using sp mixin(allocRay);
            
            (fx, fy) = vary(fx, fy, 5);
            // while (fx < 0) fx += dw; while (fx >= dw) fx -= dw;
            // while (fy < 0) fy += dh; while (fy >= dh) fy -= dh;
            if (fx < 0) fx = 0; if (fx > dw - 1) fx = dw - 1;
            if (fy < 0) fy = 0; if (fy > dh - 1) fy = dh - 1;
            
            coordsf_to_ray(dw, dh, fx, fy, &rayplanes[sp.ray-id][i]);
            
            resplanes[firstRes][i].data = 0; // lens mutation in progress
          } else if (whichCase == 2) {
            sp.state = 1; // tail mutation
            // first, find the terminating ray .. walk until end reached
            int ray_offset;
            while (res.success && res.reflective-color != vec3f(0) && ray_offset < depth - 1) {
              ray_offset ++;
              res = &resplanes[firstRes + ray_offset][i];
              ray = &rayplanes[firstRay + ray_offset][i];
            }
            using sp mixin(allocRay);
            // "ray" now points at the last ray in the chain
            if (ray_offset) {
              res = &resplanes[firstRes + ray_offset - 1][i];
              ray = &rayplanes[firstRes + ray_offset - 1][i];
              generateOutRay(&rayplanes[sp.ray-id][i], ray, ray.pos, res);
              resplanes[firstRes][i].data = ray_offset + 1;
            } else {
              rayplanes[sp.ray-id][i] = rayplanes[firstRes][i]; // safe default
              sp.state = -1; // skip
            }
          } else {
            sp.state = 2; // new path mutation
          }
          // writeln "lens mutate $(*ray) to $(*sp.ray)";
        }
      }
    }
    
    class Mutate2 : CommandHandler {
      int firstRay, firstRes, skip;
      void init(int firstId, firstResId, skipLen) (firstRay, firstRes, skip) = (firstId, firstResId, skipLen);
      void process(VMState[] list, int from, to) {
        for int i <- from..to {
          auto sp = &list[i];
          
          if (void*:sp.handler == void*:CommandHandler:this)::
          sp.stream = sp.stream[1..$];
          
          // skip if tail mutating
          if (sp.state != 0 /* no second ray */) {
            using sp { mixin(allocRay); mixin(allocResult); }
            sp.stream = sp.stream[skip..$];
          } else::
          auto ray = &rayplanes[sp.ray-id][i], res = &resplanes[sp.result-id][i];
          auto oldray2 = &rayplanes[firstRay + 1][i];
          auto oldres2 = &resplanes[firstRes + 1][i];
          
          using sp mixin(allocRay);
          if (res.success && res.reflective-color != vec3f(0))::
          
          if (!oldres2.success) res.success = false;
          else::
          auto nuray = &rayplanes[sp.ray-id][i];
          nuray.pos = ray.(pos + dir * (res.distance * EPS));
          nuray.dir = oldray2.(pos + oldres2.distance * dir) - nuray.pos;
          if (nuray.dir.magnitude == 0) {
            writeln "problem for $(*oldray2) @$(oldres2.distance) compared to $$*nuray";
            nuray.dir = oldray2.dir; // hackaround
            // _interrupt 3;
          }
          nuray.dir = nuray.dir.normalized;
        }
      }
    }
    
    CommandHandler mkTestRaySelector(int baseRay, baseRes, skip) {
      return new Mutate1 (baseRay, baseRes, skip);
    }
    CommandHandler mkTestRaySelector2(int baseRay, baseRes, skip) {
      return new Mutate2 (baseRay, baseRes, skip);
    }
    void process(VMState[] list, int from, to) {
      for int i <- from..to {
        auto sp = &list[i];
        
        if (void*:sp.handler == void*:CommandHandler:this)::
        sp.stream = sp.stream[1..$];
        
        auto res = &resplanes[firstRes][i];
        // if this fails, the ray is over already
        int numFree = 2;
        if (sp.state == 2) numFree = depth;
        int depth = depth; // hax
        bool retry; // same kind of mutation
        void delegate() flipPath;
        int tailOffset; // kept outside the if so that the flipPath closure works
        if (res.success) {
          if (sp.state == -1) retry = true;
          else if (sp.state != 2) { // two-ray form
            auto data = res.data;
            if (data > 0) {
              // writeln "CASE1: $(data - 1) tail mutate";
              tailOffset = data - 1;
              auto res1 = &resplanes[sp.result-id][i];
              if (res1.reflective-color != vec3f(0)) {
                retry = true; // not part of the environment :(
              } else {
                flipPath = delegate void() {
                  swap rayplanes[firstRay + tailOffset][i], rayplanes[sp.ray-id-1][i];
                  swap resplanes[firstRes + tailOffset][i], resplanes[sp.result-id-0][i];
                  sp.cached = false;
                };
              }
            } else {
              // writeln "CASE2: lens mutate";
              auto res11 = &resplanes[firstRes][i];
              auto res12 = &resplanes[firstRes + 1][i];
              auto res21 = &resplanes[sp.result-id-1][i];
              auto res22 = &resplanes[sp.result-id-0][i];
              retry = true;
              
              // scenery mode!
              if (res11.success && res21.success && res11.reflective-color == vec3f(0) && res21.reflective-color == vec3f(0)) {
                retry = false;
                flipPath = \{
                  alias rp = rayplanes, ep = resplanes;
                  swap rp[firstRay][i], rp[sp.ray-id-1][i];
                  swap ep[firstRes][i], ep[sp.result-id-1][i];
                  sp.cached = false;
                };
              } else::
              float normaldot = res11.normal * res21.normal #.sum;
              // bool normalsDiffer = normaldot <= 0.99; // allow some drift with normals
              bool normalsDiffer = normaldot <= 0.8; // allow some drift with normals
              // float xnormaldot = 1 - (acosf (normaldot * 0.999)) / PI;
              bool newpathfail;
              if (normalsDiffer) newpathfail = true;
              if (res22.distance == 0) newpathfail = true;
              else {
                if (res21.normal * rayplanes[sp.ray-id][i].dir #.sum < 0) {
                  // second ray of lens mutation would have taken us into an object
                  newpathfail = true;
                }
              }
              if (!res11.success || !res21.success || res21.reflective-color == vec3f(0)
                || res12.distance == 0 || newpathfail)
              {
              } else::
              // scale by min distance traversed; smooth out rounding errors
              auto cpt1 = rayplanes[firstRay+1][i].(pos + dir * res12.distance);
              auto cpt2 = rayplanes[sp.ray-id ][i] .(pos + dir * res22.distance);
              auto delta = |cpt1 - cpt2|;
              delta /= [res12.distance, res22.distance][res22.distance < res12.distance];
              // connect the ray and rewind
              // writeln "collision pt 1{$(cpt1)} 2{$(cpt2)} delta $(delta) {* $([res1.distance, res3.distance][res3.distance < res1.distance])}";
              // writeln "ray1: $(sp.rays[firstRay])";
              // writeln "subst with $(sp.rays[$-2])";
              if (delta < 0.001) {
                retry = false;
                flipPath = \{
                  alias rp = rayplanes; alias ep = resplanes;
                  swap rp[firstRay  ][i], rp[sp.ray-id-1][i];
                  swap rp[firstRay+1][i], rp[sp.ray-id-0][i];
                  swap ep[firstRes  ][i], ep[sp.result-id-1][i];
                  swap ep[firstRes+1][i], ep[sp.result-id-0][i];
                  sp.cached = false;
                };
              }
            }
          } else {
            // writeln "set flipPath for case2: $depth";
            flipPath = delegate void() {
              auto start1 = sp.ray-id    - depth + 1,
                   start2 = sp.result-id - depth + 1;
              for int k <- 0..depth {
                swap rayplanes[firstRay+k][i], rayplanes[start1+k][i];
                swap resplanes[firstRes+k][i], resplanes[start2+k][i];
              }
              sp.cached = false;
            };
          }
          alias limit = markovSteps;
          if (sp.state2 < limit) {
            c__3++;
            sp.state2 ++;
            alias quad = (sp, i, firstRay, firstRes);
            if (retry) {
              // writeln "RETRY";
              // don't record result; instead, record present sample again
              // writeln "$failRecordBias";
              auto v = evaluateRay(quad, numFree, isBack => &bool b);
              recordState(quad, v, b, 1);
              sp.stream = sp.stream.ptr[-stepsToRewind + 1 .. sp.stream.length];
            } else {
              c__++;
              // metropolis happens here
              // writeln "firstRay $firstRay, firstRes $firstRes, sp.rays $(sp.rays.length), sp.results $(sp.results.length)";
              // metropolis light transport
              auto v1 = evaluateRay(quad, numFree, isBack => &bool isBackground1), f1 = value(v1, isBackground1);
              auto backup = sp.(rayCache, cached, cachedBack); // backup cache state
              flipPath();
              auto v2 = evaluateRay(quad, numFree, isBack => &bool isBackground2), f2 = value(v2, isBackground2);
              /*if (isBackground1 || isBackground2) {
                writeln "for $(isBackground1), $(isBackground2): $f1, $f2, $v1, $v2";
              }*/
              if (f2 >= f1) { // always switch to
                recordState(quad, v2, isBackground2, 1);
              } else if (f1 != 0) { // prevent div0 bug
                // probability of f2/f1
                float r = randf();
                float ratio = f2 / f1;
                // old ray is swapped to end
                recordState(sp, i, sp.ray-id - numFree + 1, sp.result-id - numFree + 1, v1, isBackground1, 1 - ratio);
                recordState(quad, v2, isBackground2, ratio);
                if (r < ratio) { // switch to
                } else { // stay
                  flipPath();
                  sp.(rayCache, cached, cachedBack) = backup; // restore cache state
                }
              } else {
                recordState(quad, v2, isBackground2, 1);
              }
              sp.stream = sp.stream.ptr[-stepsToRewind + 1 .. sp.stream.length];
              // standard path tracing
              /*flipPath();
              sp.stream = sp.stream.ptr[-stepsToRewind .. sp.stream.length];*/
            }
          }
        }
        using sp mixin(freeRay.replace("!!", "numFree"));
        using sp mixin(freeResult.replace("!!", "numFree"));
      }
    }
  }
  CommandHandler[] buildCommandStream() {
    CommandHandler[auto~] res;
    
    for (0..samples) {
      res ~= new CopyRay;
      
      alias baseTup = (1, 0, sup.length);
      CommandHandler[] buildPathTrace() {
        PathTraceStep lastPTStep;
        int i = 1;
        CommandHandler[auto~] res;
        do {
          if (lastPTStep) lastPTStep.skip = sup.length;
          res ~= sup;
        } while (i++ < depth) {
          using new PathTraceStep {
            lastPTStep = that;
            res ~= that;
          }
        }
        return res[];
      }
      res ~= buildPathTrace();
      // ^
      // res += depth
      // rays += depth
      int rewindpos = res.length;
      res ~= new RecordResultStep(1, 0);
      using new MetropolisStep {
        (firstRay, firstRes, skip) = baseTup;
        res ~= mkTestRaySelector baseTup; // doesn't add a ray if state == 2
        CommandHandler[] part1, part2;
        // if (state == 2) .. 
        // make use of rays-needed-cur++
        part1 ~= new RandomizeRay(baseRay/* - 1*/); // offer a new random path
        part1 ~= buildPathTrace();
        // reset
        // .. else ..
        part2 ~= sup; // results ++
        part2 ~= mkTestRaySelector2 baseTup;
        part2 ~= sup; // results ++
        // .. end if
        res ~= mkIfElse(2, part1, part2);
        // reset
        
        res ~= that;
        
        stepsToRewind = res.length - rewindpos;
        
      }
      auto fr = new FreeRay, fs = new FreeResult;
      for 0..depth {
        res ~= fr;
        res ~= fs;
      }
    }
    return res[];
  }
}
