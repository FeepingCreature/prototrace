module scene.scale;

import scene.base;

class PostScale : CommandHandler {
  vec3f factor;
  void init(vec3f f) factor = f;
  override {
    void recordEffect(VMStats* stats) { stats.consumesRay(); }
    bool irregularStep() { return false; }
    void process(VMState[] list, int start, end) {
      factor.w = 1;
      for int i <- start .. end {
        ref sp = list[i];
        
        if (sp.handler !is CommandHandler:this) fail;
        sp.stream = sp.stream[1..$];
        
        using sp mixin(freeRay.replace("!!", "1"));
        ref res = resplanes[sp.result-id][i];
        if (res.success) {
          ref ray = rayplanes[sp.ray-id][i];
          float f2 = |ray.dir / factor|;
          if (f2 != 0) {
            // printf("adjust %f to %f (f %f)\n", double:res.distance, double:(res.distance/f2), double:f2);
            res.distance /= f2;
          } else {
            // printf("shit.\n");
          }
          // else we're pretty much boned.
        }
        // TODO adjust normal
      }
    }
  }
}

class Scale : CommandHandler {
  vec3f factor;
  void init(vec3f f) factor = f;
  void init(float f) factor = vec3f(f);
  override {
    void recordEffect(VMStats* stats) {
      stats.addsRay();
    }
    bool irregularStep() { return false; }
    void process(VMState[] list, int start, end) {
      factor.w = 1; // oops
      for int i <- start .. end {
        ref sp = list[i];
        
        if (sp.handler !is CommandHandler:this) fail;
        sp.stream = sp.stream[1..$];
        
        ref ray = rayplanes[sp.ray-id][i];
        using sp mixin(allocRay);
        ref ray2 = rayplanes[sp.ray-id][i];
        ray2.pos = ray.pos / factor;
        ray2.dir = ray.dir / factor;
        float dist = |ray2.dir|;
        if (dist != 0) ray2.dir /= dist;
      }
    }
  }
}

CommandHandler[] buildScale(vec3f factor, CommandHandler[] obj) {
  CommandHandler[auto~] res;
  res ~= new Scale(factor);
  res ~= obj;
  res ~= new PostScale(factor);
  return res[];
}

class PreScale : PreHandler {
  vec3f factor;
  PreHandler sub;
  void init(vec3f factor, PreHandler sub) this.(factor, sub) = (factor, sub);
  override void iterate(void delegate(PreHandler) dg) { dg sub; }
  override CommandHandler[] flatten() { return buildScale(factor, scope= sub.flatten()); }
}

PreHandler mkScale(vec3f factor, PreHandler sub) { return new PreScale(factor, sub); }
