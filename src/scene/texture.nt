module scene.texture;

import scene.base, base, gd;

extern(C) void interpolate(float u, v, Texture* tex, vec3f* outp);

float ipow(float f, int i) {
  if (i < 0) return 1f / ipow(f, -i);
  else if (i == 0) return 1f;
  else if (i == 1) return f;
  else if (i == 2) return f * f;
  else if (i & 1) { float f2 = ipow(f, i / 2); return f * f2 * f2; }
  else { float f2 = ipow(f, i / 2); return f2 * f2; }
}

static import c.math;
int mylog2(float f) {
  if (f < 0.0001f) return -128;
  int res = int: c.math.floorf c.math.log2f f # + 1;
  if (res < -128) return -128;
  if (res > 127) assert(false);
  return res;
}

ubyte[] encodeHDR(vec3f[] data, int w, h) {
  ubyte[auto~] res;
  res ~= ubyte[]:"#?RADIANCE\n";
  res ~= ubyte[]:"# Made with ProtoTrace\n";
  res ~= ubyte[]:"FORMAT=32-bit_rle_rgbe\n";
  res ~= ubyte[]:"\n";
  res ~= ubyte[]:"-Y $h +X $w\n";
  auto scanline = new ubyte x 4[] w;
  onSuccess scanline.free;
  for (int y <- 0..h) {
    // wth
    res ~= ubyte:2; // i
    res ~= ubyte:2; // grn
    res ~= ubyte:(w >> 8);
    res ~= ubyte:(w & 0xff);
    // build scanline
    auto line = data[y*w .. (y+1)*w];
    for (int x <- 0..w) {
      auto exp1 = mylog2(line[w - 1 - x].x), exp2 = mylog2(line[w - 1 - x].y), exp3 = mylog2(line[w - 1 - x].z);
      auto exp = exp1.max(exp2).max(exp3);
      if (exp == -128) {
        scanline[x][(0, 1, 2, 3)] = ubyte:0 x 4;
      } else {
        auto rfactor = ipow(2, exp);
        exp += 128;
        assert(0 <= exp < 256);
        auto vec = line[w - 1 - x] / rfactor;
        scanline[x][0] = ubyte:int:c.math.floorf (vec.x * 256);
        scanline[x][1] = ubyte:int:c.math.floorf (vec.y * 256);
        scanline[x][2] = ubyte:int:c.math.floorf (vec.z * 256);
        scanline[x][3] = ubyte:exp;
      }
    }
    auto parts = scanline.length / 127, rem = scanline.length - parts * 127;
    for (int c <- 0..4) {
      int k;
      for (int i <- 0..parts) {
        res ~= ubyte:127;
        for (0..127)
          res ~= ubyte:scanline[k++][c];
      }
      res ~= ubyte:rem;
      for (0..rem)
        res ~= ubyte:scanline[k++][c];
    }
  }
  return res[];
}

import std.string, std.math;
HdrTex* parseHDR(ubyte[] data, string fn) {
  string asText = string:data;
  auto res = new HdrTex;
  int w, h;
  bool running = true;
  while (running) {
    auto line = slice(&asText, "\n");
    if (string rest = line.startsWith "-Y ") {
      h = slice(&rest, " +X ").atoi();
      w = rest.atoi();
      running = false;
      data = ubyte[]:asText;
    }
  }
  writeln "Read $w x $h ($fn)";
  res.data = new vec3f[] w * h;
  auto scanline = new ubyte x 4[] w;
  alias takeNextChar = data[(0, 1..$)];
  alias takeNextChar2 = data[(0, 1, 2..$)];
  
  for (int y <- 0..h) {
    // writeln "Read line $y";
    (int i, data) = takeNextChar;
    void fail() { _interrupt 3; }
    if (i != 2) fail;
    (int grn, int blu, data) = takeNextChar2;
    // writeln "grn $grn, blu $blu";
    if (grn != 2 || blu & 128) fail;
    (i, data) = takeNextChar;
    // writeln "gives i $i -> $(blu << 8 | i) -> $(blu << 8 | i != w)";
    if (blu << 8 | i != w) fail;
    
    for (int c <- 0..4) {
      int j;
      while j < w {
        (int code, data) = takeNextChar;
        if (code > 128) { // run
          code &= 127;
          (ubyte val, data) = takeNextChar;
          while (code--)
            scanline[j++][c] = val;
        } else { // non-run
          while (code--)
            (scanline[j++][c], data) = takeNextChar;
        }
      }
    }
    
    auto resline = res.data[y*w .. (y+1)*w];
    for (int x <- 0..w) {
      int
        red = scanline[x][0],
        green = scanline[x][1],
        blue = scanline[x][2],
        exp = scanline[x][3];
      auto col = vec3f(red / 256f, green / 256f, blue / 256f) * ipow(2, exp - 128);
      float len = |col|;
      if (len > 1) { float newlen = ipow((len - 1) + 1, 5) * 1.5; col *= (newlen / len); }
      resline[x] = col;
    }
  }
  res.(w, h) = (w, h);
  return res;
}
