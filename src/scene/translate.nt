module scene.translate;

import scene.base, scene.util;

class Translate : SceneObject, CommandHandler {
  vec3f vector;
  void init(vec3f v) vector = v;
  override {
    void process(VMState[] list, int start, end) {
      for int i <- start .. end {
        auto sp = &list[i];
        
        if (void*:sp.handler == void*:CommandHandler:this)::
        sp.stream = sp.stream[1..$];
        
        ref ray = rayplanes[sp.ray-id][i];
        using sp mixin(allocRay);
        rayplanes[sp.ray-id][i].(pos, dir) = ray.(pos - vector, dir);
      }
    }
    bool irregularStep() { return false; }
    void recordEffect(VMStats* stats) { stats.addsRay(); }
  }
}

CommandHandler[] buildTranslate(vec3f vector, CommandHandler[] obj) {
  CommandHandler[auto~] res;
  auto tl = new Translate(vector);
  res ~= tl;
  res ~= obj;
  res ~= new FreeRay;
  return res[];
}

class PreTranslate : PreHandler {
  vec3f vector;
  PreHandler sub;
  void init(vec3f vector, PreHandler sub) this.(vector, sub) = (vector, sub);
  override void iterate(void delegate(PreHandler) dg) { dg sub; }
  override CommandHandler[] flatten() { return buildTranslate(vector, scope= sub.flatten()); }
}

PreHandler mkTranslate(vec3f vector, PreHandler sub) { return new PreTranslate(vector, sub); }
