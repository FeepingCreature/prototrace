module scene.triangle;

import scene.base, scene.texture, std.file;

class Triangle : SceneObject {
  vec3f a, ba, ca, n;
  void init(vec3f a, b, c) {
    this.(a, ba, ca) = (a, b - a, c - a);
    n = vec3f(
      ba.y*ca.z - ba.z*ca.y,
      ba.z*ca.x - ba.x*ca.z,
      ba.x*ca.y - ba.y*ca.x
    );
  }
  bool collide(Ray* ray, Result* res) {
    vec3f normal = n.normalized;
    float dist = -(normal * (ray.pos - a)).sum / (ray.dir * normal).sum;
    if (dist < 0) return false;
    auto p = ray.pos + ray.dir * dist;
    // thanks, http://www.blackpawn.com/texts/pointinpoly/default.html !
    auto v0 = ca;
    auto v1 = ba;
    auto v2 = p - a;
    float
      dot00 = v0 * v0 #.sum,
      dot01 = v0 * v1 #.sum,
      dot02 = v0 * v2 #.sum,
      dot11 = v1 * v1 #.sum,
      dot12 = v1 * v2 #.sum;
    float invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
    float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    float v = (dot00 * dot12 - dot01 * dot02) * invDenom;
    if (u < 0 || v < 0 || u+v > 1) return false;
    res.distance = dist;
    res.col = vec3f(1);
    res.normal = normal;
    return true;
  }
  void process(VMState[] list) {
    vec3f normal = n.normalized;
    auto v0 = ca;
    auto v1 = ba;
    float
      dot00 = v0 * v0 #.sum,
      dot01 = v0 * v1 #.sum,
      dot11 = v1 * v1 #.sum;
    float invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
    
    for (int i = 0; i < list.length; ++i) {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      (vec3f pos, vec3f dir) = rayplanes[sp.ray-id-1][i].(pos, dir);
      using sp mixin(allocResult);
      auto res = &resplanes[sp.result-id-1][i];
      
      float dist = -(normal * (pos - a)).sum / (dir * normal).sum;
      if (dist < 0) res.success = false;
      else {
        auto p = pos + dist * dir;
        
        auto v2 = p - a;
        
        float
          dot02 = v0 * v2 #.sum,
          dot12 = v1 * v2 #.sum;
        
        float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        float v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        // writeln "$u, $v";
        
        if (u > 0 && v > 0 && u + v < 1) {
          res.(success, distance, col, emissive-color, normal)
            = (true,    dist,vec3f(1), vec3f(0),       normal);
        } else {
          res.success = false;
        }
      }
    }
  }
  CommandHandler[] buildCommandStream(VMStats* stats) {
    stats.needsResult;
    return CommandHandler[]:null ~ this;
  }
}

struct TriangleInfo {
  vec3f a, b, c, n;
  vec2f uv-a, uv-ba, uv-ca;
  float invDenom; Texture* texture-state;
  string toString() return "tri<$a $b $c>";
}

int round16(int i) { return (i + 15) &-16; }

// for sizeof purposes
struct HalfATriangleNode {
  AABB aabb;
  HalfATriangleNode*[] children;
}

TriangleInfo[] tlist;

struct TriangleNode {
  AABB aabb;
  TriangleNode*[] children;
  int[auto~] info;
  alias left = children[0], right = children[1];
  int countSize() { return info.length + sum cat(0..1, [for ch <- children: ch.countSize()]); }
  // return void*:size if slab is null, res otherwise
  void validate() {
    if (children.length > 4) {
      writeln "Invalid children-array: $(children.(length, ptr))";
      _interrupt 3;
    }
    if (info.length > 100_000 || info.length < 0) {
      writeln "Invalid info-array: $(info.(length, ptr))";
      _interrupt 3;
    }
    for auto ch <- children ch.validate;
  }
  void* linearAllocate(void** slabp = null) {
    alias slab = *slabp;
    if (slabp) {
      auto res = TriangleNode*:slab;
      // slab = void*:round16(int:slab + size-of TriangleNode);
      res.aabb = aabb;
      if (children.length) {
        // if children.length, nobody's gonna access info
        slab = void*:round16(int:slab + size-of HalfATriangleNode);
        res.children = TriangleNode**:slab #[0..children.length];
        slab = void*:round16(int:slab + children.length * size-of TriangleNode*);
        for int i <- 0..children.length {
          res.children[i] = children[i].linearAllocate &slab;
        }
      } else {
        slab = void*:round16(int:slab + size-of TriangleNode);
        res.info = type-of res.info:$ int*:slab #[0..info.length];
        slab = void*:round16 (int:slab + info.length * size-of int);
        for int i <- 0..info.length
          res.info[i] = info[i];
        info.free;
      }
      return res;
    } else {
      if (children.length) {
        int s;
        for auto ch <- children s += int:ch.linearAllocate();
        return void*:(round16 size-of HalfATriangleNode + round16 (children.length * size-of TriangleNode*) + s);
      } else {
        return void*:(round16 size-of TriangleNode + round16 (info.length * size-of int));
      }
    }
  }
  void free() {
    if (children.length) { for auto ch <- children ch.free; }
    else info.free;
  }
  void addTriangle(int t) {
    if (!info.length) aabb.addInitialPoint tlist[t].a;
    else aabb.addPoint tlist[t].a;
    
    info ~= t;
    
    aabb.addPoint tlist[t].b;
    aabb.addPoint tlist[t].c;
  }
  TriangleNode* trySplitTris(int axis) {
    auto res = new TriangleNode;
    res.aabb = aabb;
    
    auto left = new TriangleNode, right = new TriangleNode;
    res.children = new TriangleNode*[] 2;
    res.children[0] = left;
    res.children[1] = right;
    
    float marker = 0f; // average position on axis
    float f = 1f / (info.length * 3);
    for auto tri <- info {
      marker += (tlist[tri].a[axis] + tlist[tri].b[axis] + tlist[tri].c[axis]) * f;
    }
    for auto tri <- info {
      if (tlist[tri].a[axis] < marker || tlist[tri].b[axis] < marker || tlist[tri].c[axis] < marker)
        left.addTriangle tri;
      if (tlist[tri].a[axis] >= marker || tlist[tri].b[axis] >= marker || tlist[tri].c[axis] >= marker)
        right.addTriangle tri;
    }
    return res;
  }
  TriangleNode* split(float* perfp, perf2p) {
    TriangleNode* x 3 tns;
    tns[0] = trySplitTris(0);
    tns[1] = trySplitTris(1);
    tns[2] = trySplitTris(2);
    
    float x 4 perf1, perf2;
    for int i <- 0..3 {
      auto l = tns[i].left.info.length, r = tns[i].right.info.length, t = info.length;
      perf1[i] = (t * 1f / (l + r)) - 0.5 #*2f;
      perf2[i] = ((t - r) * 2f / t) * ((t - l) * 2f / t);
    }
    
    auto il = info.length;
    int bestChoice = 3;
    perf1[bestChoice] = 0;
    alias limit2 = 0.1;
    if (perf2[0] > limit2 && perf1[0] > perf1[bestChoice]) bestChoice = 0;
    if (perf2[1] > limit2 && perf1[1] > perf1[bestChoice]) bestChoice = 1;
    if (perf2[2] > limit2 && perf1[2] > perf1[bestChoice]) bestChoice = 2;
    if (bestChoice == 3) return null;
    auto res = tns[bestChoice];
    *perfp = perf1[bestChoice];
    *perf2p = perf2[bestChoice];
    for int i <- 0..3 if i != bestChoice tns[i].free;
    return res;
  }
  void splitreplace() {
    int il = info.length;
    if (il < 4) return;
    float eff, eff2;
    auto res = split(&eff, &eff2);
    if (!res) return;
    auto rril = res.right.info.length, rlil = res.left.info.length;
    if (eff < 0.39) {
      res.free;
      return;
    } // not worth it? HEURISTIC. See perf.txt
    // writeln "$il: $rlil and $rril: $eff and $eff2";
    children = res.children;
    if (!children.length) info.free;
    left .splitreplace();
    right.splitreplace();
  }
}

int[] tricache;
int hash;

// extern(C) void fast_triangleset_process(Ray**, Result**, VMState*, int, TriangleInfo* info, TriangleNode *root, int* tricache, int *hashp, void* self);

class TriangleSet : SceneObject {
  TriangleNode* root;
  TriangleInfo[auto~] info;
  void init() { root = new TriangleNode; }
  void init(TriangleNode* tn) { root = tn; }
  void addTriangle(vec3f a, vec2f atex, vec3f b, vec2f btex, vec3f c, vec2f ctex, Texture* texptr) {
    TriangleInfo ti;
    ti.(a, b, c, uv-a, uv-ba, uv-ca) = (a, b, c, atex, btex - atex, ctex - atex);
    ti.texture-state = texptr;
    auto ba = b - a, ca = c - a;
    ti.n = ti.(vec3f(
      ba.y*ca.z - ba.z*ca.y,
      ba.z*ca.x - ba.x*ca.z,
      ba.x*ca.y - ba.y*ca.x
    ));
    if (ti.n == vec3f(0)) ti.n = vec3f.Y;
    ti.n = -ti.n.normalized;
    
    float dot00 = ca * ca #.sum;
    float dot01 = ca * ba #.sum;
    float dot11 = ba * ba #.sum;
    // precompute
    float denom = dot00 * dot11 - dot01 * dot01;
    if (denom != 0) ti.invDenom = 1 / denom;
    else ti.invDenom = 1;
    
    info ~= ti;
    tlist = info[];
    root.addTriangle(info.length - 1);
  }
  void flatten() {
    auto size = int:root.linearAllocate();
    // writeln "full slab size = $size";
    void* ptr = mem.calloc (1, size);
    root = TriangleNode*: root.linearAllocate(&ptr);
    auto new_info = new TriangleInfo[] info.length #.ptr;
    for int i <- 0..info.length
      new_info[i] = info[i];
    info = type-of info: new_info[0..info.length];
  }
  void optimize() {
    tlist = info[];
    root.splitreplace();
    // four children is always better than two assuming ray isn't a total miss
    // ray is total miss: 2 tests => 4 tests
    // ray hits one child: 2 tests + 2 at the next level = 4 tests => 4 tests
    // ray hits both children: 2 tests + 4 at the next level = 6 tests => 4 tests
    void two_to_four(TriangleNode* tnode) {
      if (tnode.(children.length == 2 && children[0].children.length == 2 && children[1].children.length == 2)) {
        auto newchildren = new TriangleNode*[] 4;
        for (int i1, (int i2, int i3)) <- zip(0..4, cross(0..2, 0..2))
          newchildren[i1] = tnode.children[i2].children[i3];
        tnode.children = newchildren;
      }
      for auto ch <- tnode.children two_to_four ch;
    }
    // may not be worth it .. test more?
    two_to_four root;
    flatten;
  }
  bool collide(Ray* ray, Result* res) { _interrupt 3; }
  void process(VMState[] list) {
    if (tricache.length != info.length) { tricache.free; tricache = new int[] info.length; }
    assert(false);
    // fast_triangleset_process(rayplanes.ptr, resplanes.ptr, list.ptr, list.length, info.ptr, root, tricache.ptr, &hash, void*:CommandHandler:this);
  }
  CommandHandler[] buildCommandStream(VMStats* stats) {
    stats.needsResult;
    return CommandHandler[]:null ~ this;
  }
}
