module scene.util;

import std.random, std.thread;

import scene.base;

alias EPS = 0.999;

shared int c__, c__2, c__3;

shared int dw, dh;

shared vec2f delegate() getScale;

IRandom rng;
float randf() { return std.random.base.randf(rng); }
int rand() { return rng.rand(); }
void init() {
  rng = getPRNG(23);
  auto dg = onThreadCreation;
  onThreadCreation = new delegate void(void* basep) {
    if (dg) { dg(basep); }
    rng = getPRNG(int:basep);
  };
}

/*
vec3f rand_sphere() {
  vec3f res;
  float magn;
  do {
    res = vec3f((randf() * 2 - 1) x 3);
    magn = |res|;
  } while magn > 1 { }
  return res / magn;
}*/

// http://www.math.niu.edu/~rusin/known-math/96/sph.rand
vec3f rand_sphere() {
  float z = randf() * 2 - 1;
  float t = randf() * PI2;
  float r = sqrt(1 - z * z);
  float x = r * cos t;
  float y = r * sin t;
  return vec3f(x, y, z);
}

(float, float) vary(float x, y, int spread) {
  float randf2() {
    alias shift = -2;
    float f = (randf() - 0.5) * 2 * spread;
    if (f < 0) return -pow(2, -f + shift);
    else       return  pow(2, f + shift);
  }
  return (x+randf2(), y+randf2());
}

// average top result into second-from-top
class AverageStep : CommandHandler {
  int count, skip;
  void init(int c, s = 0) { this.count = c; this.skip = s; }
  override void recordEffect(VMStats* stats) { }
  void process(VMState[] list, int start, end) {
    float factor = 1f / count;
    for int i <- start .. end {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      ref dst = resplanes[sp.result-id-1 - skip][i], src = resplanes[sp.result-id-1][i];
      vec3f sum = vec3f(0);
      if (dst.success) sum = dst.emissive-color;
      if (src.success) sum += src.emissive-color * factor;
      dst.success |= src.success;
      dst.emissive-color = sum;
    }
  }
}

class AllocEmptyResult : CommandHandler {
  override void recordEffect(VMStats* stats) { stats.addsResult; }
  void process(VMState[] list, int start, end) {
    for int i <- start .. end {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      using sp mixin(allocResult);
      ref res = resplanes[sp.result-id-1][i];
      res.success = false;
      res.data = 0;
    }
  }
}

class FreeResult : CommandHandler {
  override void recordEffect(VMStats* stats) { stats.consumesResult; }
  void process(VMState[] list, int start, end) {
    for int i <- start .. end {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      using sp mixin(freeResult.replace("!!", "1"));
    }
  }
}

class AverageResults : SceneObject {
  SceneObject sup;
  int count;
  void init(int count, SceneObject sup) this.(sup, count) = (sup, count);
  CommandHandler[] buildCommandStream() {
    auto stream = sup.buildCommandStream();
    
    auto as = new AverageStep (count);
    auto fr = new FreeResult;
    
    CommandHandler[auto~] res;
    res ~= new AllocEmptyResult; // res ++
    for (int i = 0; i < count; ++i) {
      res ~= stream; // res ++
      res ~= as;
      res ~= fr; // res --
    }
    return res[];
  }
}

class FreeRay : CommandHandler {
  override void recordEffect(VMStats* stats) { stats.consumesRay; }
  void process(VMState[] list, int start, end) {
    for int i <- start .. end {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      using sp mixin(freeRay.replace("!!", "1"));
    }
  }
}

class CopyRay : CommandHandler {
  int from;
  void init() { from = -1; }
  void init(int f) from = f;
  override void recordEffect(VMStats* stats) {
    stats.addsRay;
  }
  void process(VMState[] list, int start, end) {
    // TODO: memcpy runs
    for int i <- start .. end {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      using sp mixin(allocRay);
      if (from == -1) {
        rayplanes[sp.ray-id - 1][i] = rayplanes[sp.ray-id - 2][i];
      } else {
        rayplanes[sp.ray-id - 1][i] = rayplanes[from][i];
      }
    }
  }
}

class JumpIfData : CommandHandler {
  int compare, skip, depth; void init(int c, d, s) (compare, depth, skip) = (c, d, s);
  override void recordEffect(VMStats* stats) { }
  override void process(VMState[] list, int from, to) {
    for int i <- from .. to {
      ref sp = list[i];
      
      if (sp.handler !is CommandHandler:this) continue;
      sp.stream = sp.stream[1..$];
      
      ref res = resplanes[sp.result-id-1 - depth][i];
      if (res.data == compare) sp.stream = sp.stream[skip .. $];
    }
  }
}

class AddData : CommandHandler {
  int depth, value;
  void init(int d, v) (depth, value) = (d, v);
  override void recordEffect(VMStats* stats) { }
  override void process(VMState[] list, int from, to) {
    for int i <- from .. to {
      ref sp = list[i];
      
      if (sp.handler !is CommandHandler:this) continue;
      sp.stream = sp.stream[1..$];
      
      ref res = resplanes[sp.result-id-1 - depth][i];
      res.data += value;
    }
  }
}

class Jump : CommandHandler {
  int offset, start;
  void init() { start = -1; offset = -1; }
  void to(int i) { if (start != -1) fail; start = i; }
  // must be right before the jump
  void from(int target) { if (start == -1) fail; offset = start - target; }
  override void recordEffect(VMStats* stats) { }
  override void process(VMState[] list, int from, to) {
    if (offset == -1) fail;
    for int i <- from .. to {
      ref sp = list[i];
      
      if (sp.handler !is CommandHandler:this) continue;
      sp.stream = sp.stream[offset..$];
    }
  }
}

CommandHandler[] repeat(int depth, int count, CommandHandler[] delegate() dg) {
  CommandHandler[auto~] res;
  auto jmp = new Jump;
  auto sub = dg();
  
  jmp.to(res.length);
  res ~= new JumpIfData(d => depth, count, sub.length + 2);
  res ~= sub;
  res ~= new AddData(d => depth, 1); // plus one ..
  jmp.from(res.length);
  res ~= jmp; // plus two.
  return res[];
}

class SwapAndDiscardRes : CommandHandler {
  override void recordEffect(VMStats* stats) { stats.consumesResult; }
  override void process(VMState[] list, int from, to) {
    for int i <- from .. to {
      ref sp = list[i];
      
      if (sp.handler !is CommandHandler:this) continue;
      sp.stream = sp.stream[1 .. $];
      
      ref res1 = resplanes[sp.result-id-1][i];
      ref res2 = resplanes[sp.result-id-2][i];
      res2 = res1;
      using sp mixin freeResult.replace(`!!`, `1`);
    }
  }
}

extern(C) {
  void ray_to_coordsf(int dw, dh, Ray* rayp, float* xp, yp);
  void coordsf_to_ray(int dw, dh, float x, y, Ray* rayp);
}

/*
class RandomizeRay : CommandHandler {
  int src;
  void init(int src = -1) { this.src = src; }
  void process(VMState[] list, int start, end) {
    auto sc = getScale();
    for int i <- start .. end {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      Ray* ray;
      if (src == -1) ray = &rayplanes[sp.ray-id-1][i];
      else ray = &rayplanes[src][i];
      
      using sp mixin(allocRay);
      
      auto nray = &rayplanes[sp.ray-id-1][i];
      
      float fx, fy;
      ray_to_coordsf(dw, dh, ray, &fx, &fy);
      // (fx, fy) = vary(fx, fy, 5);
      // fx += randf() - 0.5;
      // fy += randf() - 0.5;
      fx = randf() * dw;
      fy = randf() * dh;
      coordsf_to_ray(dw, dh, fx, fy, nray);
    }
  }
}
*/

void delegate(Ray* rayp, vec3f col, bool isBack, float factor, bool isMetroHit) recordResultDg;

void recordState(VMState* sp, int i, int skipRays, skipResults, vec3f v, bool isBack, float bias) {
  bool record;
  bool isMetroHit = true;
  /*if (sp.burnInCounter > 0) sp.burnInCounter --;
  else */record = true;
  if (record) { c__2 ++; recordResultDg (&rayplanes[skipRays][i], v, isBack, bias, isMetroHit => isMetroHit); }
}

class RecordResultStep : CommandHandler {
  int skipRays, skipResults;
  void init(int skRay = 0, skRes = 0) (skipRays, skipResults) = (skRay, skRes);
  override void recordEffect(VMStats* stats) { }
  void process(VMState[] list, int start, end) {
    for int i <- start .. end {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      auto v = evaluateRay(sp, i, skipRays, skipResults, isBack => &bool b);
      recordState(sp, i, skipRays, skipResults, v, b, 1);
    }
  }
}
