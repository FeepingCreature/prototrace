module scene.util;

import base, settings, scene.base;

shared int c__, c__2, c__3;

/*
vec3f rand_sphere() {
  vec3f res;
  float magn;
  do {
    res = vec3f((randf() * 2 - 1) x 3);
    magn = |res|;
  } while magn > 1 { }
  return res / magn;
}*/

// http://www.math.niu.edu/~rusin/known-math/96/sph.rand
vec3f rand_sphere() {
  float z = randf() * 2 - 1;
  float t = randf() * PI2;
  float r = sqrt(1 - z * z);
  float x = r * cos t;
  float y = r * sin t;
  return vec3f(x, y, z);
}

(float, float) vary(float x, y, int spread) {
  float randf2() {
    alias shift = -2;
    float f = (randf() - 0.5) * 2 * spread;
    if (f < 0) return -pow(2, -f + shift);
    else       return  pow(2, f + shift);
  }
  return (x+randf2(), y+randf2());
}

// average top result into second-from-top
class AverageStep : CommandHandler {
  int count, skip;
  void init(int c, s = 1) { this.count = c; this.skip = s; }
  override void recordEffect(VMStats* stats) { }
  override bool irregularStep() { return false; }
  void process(VMState[] list, int start, end) {
    float factor = 1f / count;
    for int i <- start .. end {
      ref sp = list[i];
      
      if (sp.handler !is CommandHandler:this) continue;
      sp.stream = sp.stream[1..$];
      
      ref dst = resplanes[sp.result-id - skip][i], src = resplanes[sp.result-id][i];
      vec3f sum = vec3f(0);
      if (dst.success) sum = dst.emissive-color;
      if (src.success) sum += src.emissive-color * factor;
      dst.success |= src.success;
      dst.emissive-color = sum;
    }
  }
}

void sortPlanes(VMState[] list, int start, end) {
  int cmp(int i1, i2) {
    ref sp1 = list[i1], sp2 = list[i2];
    int v1 = int:sp1.handler, v2 = int:sp2.handler;
    if (v1 < v2) return -1;
    if (v1 > v2) return 1;
    return 0;
  }
  void swap(int i1, i2) {
    ref sp1 = list[i1], sp2 = list[i2];
    
    for int k <- 0 .. 1+max(sp1.result-id, sp2.result-id) {
      resplanes[k][(i1, i2)] = resplanes[k][(i2, i1)];
    }
    
    for int k <- 0 .. 1+max(sp1.ray-id, sp2.ray-id) {
      rayplanes[k][(i1, i2)] = rayplanes[k][(i2, i1)];
    }
    
    for int k <- 0 .. 1+max(sp1.info-id, sp2.info-id) {
      infoplanes[k][(i1, i2)] = infoplanes[k][(i2, i1)];
    }
    
    (sp1, sp2) = (sp2, sp1);
  }
  
  if (start == end) return;
  
  bool any_swaps;
  void pass() {
    for int i <- start .. (end - 1) {
      if (cmp(i, i+1) > 0) {
        swap(i, i+1);
        any_swaps = true;
      }
    }
  }
  pass;
  // do pass; // todo better sort
  // while (any_swaps) any_swaps = false;
}

class AllocEmptyResult : CommandHandler {
  int num;
  void init(int num = 1) { this.num = num; }
  override void recordEffect(VMStats* stats) { stats.addsResults num; }
  override bool irregularStep() { return false; }
  override string toString() { return "AllocEmptyResult($num)"; }
  override void process(VMState[] list, int start, end) {
    pragma(fast);
    for int i <- start .. end {
      ref sp = list[i];
      sp.stream = sp.stream[1..$];
    }
    for 0..num {
      for int i <- start .. end {
        ref sp = list[i];
        using sp mixin(allocResult);
        ref res = resplanes[sp.result-id][i];
        res.data = 0;
      }
    }
  }
}

class FreeResult : CommandHandler {
  override void recordEffect(VMStats* stats) { stats.consumesResult; }
  override bool irregularStep() { return false; }
  void process(VMState[] list, int start, end) {
    for int i <- start .. end {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      using sp mixin(freeResult.replace("!!", "1"));
    }
  }
}

class AverageResults : SceneObject {
  SceneObject sup;
  int count;
  void init(int count, SceneObject sup) this.(sup, count) = (sup, count);
  CommandHandler[] buildCommandStream() {
    auto stream = sup.buildCommandStream();
    
    auto as = new AverageStep (count);
    auto fr = new FreeResult;
    
    CommandHandler[auto~] res;
    res ~= new AllocEmptyResult; // res ++
    for (int i = 0; i < count; ++i) {
      res ~= stream; // res ++
      res ~= as;
      res ~= fr; // res --
    }
    return res[];
  }
}

class FreeRay : CommandHandler {
  override void recordEffect(VMStats* stats) { stats.consumesRay; }
  override bool irregularStep() { return false; }
  void process(VMState[] list, int start, end) {
    for int i <- start .. end {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      using sp mixin(freeRay.replace("!!", "1"));
    }
  }
}

class AllocInfo : CommandHandler {
  override void recordEffect(VMStats* stats) { stats.addsInfo; }
  override bool irregularStep() { return false; }
  void process(VMState[] list, int start, end) {
    for int i <- start .. end {
      ref sp = list[i];
      
      if (sp.handler !is CommandHandler:this) fail;
      sp.stream = sp.stream[1..$];
      
      ref info1 = infoplanes[sp.info-id][i];
      using sp mixin(allocInfo);
      ref info2 = infoplanes[sp.info-id][i];
      
      info2.flags = info1.flags;
      
      // printf("%i: =============================\n", sp.gid);
      // printf("%i: alloc info to %i\n", sp.gid, info2.flags);
      /*
      ref info = infoplanes[sp.info-id][i];
      info.wantInsideHits true;
      info.wantOutsideHits true;
      */
    }
  }
}

class FreeInfo : CommandHandler {
  override void recordEffect(VMStats* stats) { stats.consumesInfo; }
  override bool irregularStep() { return false; }
  void process(VMState[] list, int start, end) {
    for int i <- start .. end {
      ref sp = list[i];
      
      if (sp.handler !is CommandHandler:this) fail;
      sp.stream = sp.stream[1..$];
      
      using sp mixin(freeInfo.replace("!!", "1"));
    }
  }
}

class CopyRay : CommandHandler {
  int from;
  void init() { from = -1; }
  void init(int f) from = f;
  override void recordEffect(VMStats* stats) { stats.addsRay; }
  override bool irregularStep() { return false; }
  void process(VMState[] list, int start, end) {
    // TODO: memcpy runs
    for int i <- start .. end {
      auto sp = &list[i];
      
      if (void*:sp.handler == void*:CommandHandler:this)::
      sp.stream = sp.stream[1..$];
      
      using sp mixin(allocRay);
      if (from == -1) {
        rayplanes[sp.ray-id-0][i] = rayplanes[sp.ray-id-1][i];
      } else {
        rayplanes[sp.ray-id-0][i] = rayplanes[from][i];
      }
    }
  }
}

class JumpIfData : CommandHandler {
  int compare, skip, depth; void init(int c, d, s) (compare, depth, skip) = (c, d, s);
  override void recordEffect(VMStats* stats) { }
  override bool irregularStep() { return true; }
  override void process(VMState[] list, int from, to) {
    for int i <- from .. to {
      ref sp = list[i];
      
      if (sp.handler !is CommandHandler:this) fail;
      sp.stream = sp.stream[1..$];
      
      ref res = resplanes[sp.result-id - depth][i];
      if (res.data == compare) sp.stream = sp.stream[skip .. $];
    }
  }
}

class AddData : CommandHandler {
  int depth, value;
  void init(int d, v) (depth, value) = (d, v);
  override void recordEffect(VMStats* stats) { }
  override bool irregularStep() { return false; }
  override void process(VMState[] list, int from, to) {
    for int i <- from .. to {
      ref sp = list[i];
      
      if (sp.handler !is CommandHandler:this) fail;
      sp.stream = sp.stream[1..$];
      
      ref res = resplanes[sp.result-id - depth][i];
      res.data += value;
    }
  }
}

class Jump : CommandHandler {
  int offset, start;
  void init() { start = -1; offset = -1; }
  void init(int i) { offset = i; } // for manual construction
  void to(int i) { if (start != -1) fail; start = i; }
  // must be right before the jump
  void from(int target) { if (start == -1) fail; offset = start - target; }
  override string toString() { return "Jump($offset)"; }
  override bool irregularStep() { if (offset == -1) fail; return offset > 1; /* anything <= 1 is okay */ }
  override void recordEffect(VMStats* stats) { }
  override void process(VMState[] list, int from, to) {
    if (offset == -1) fail;
    for int i <- from .. to {
      ref sp = list[i];
      
      if (sp.handler !is CommandHandler:this) fail;
      sp.stream = sp.stream[offset..$];
    }
  }
}

CommandHandler[] repeat(int depth, int count, CommandHandler[] delegate() dg) {
  CommandHandler[auto~] res;
  auto jmp = new Jump;
  auto sub = dg();
  
  jmp.to(res.length);
  res ~= new JumpIfData(d => depth, count, sub.length + 2);
  res ~= sub;
  res ~= new AddData(d => depth, 1); // plus one ..
  jmp.from(res.length);
  res ~= jmp; // plus two.
  return res[];
}

class JitterRay : CommandHandler {
  int src;
  void init(int src = -1) { this.src = src; }
  override void recordEffect(VMStats* stats) { stats.addsRay(); }
  override bool irregularStep() { return false; }
  override void process(VMState[] list, int start, end) {
    int (dw, dh) = settings.imgres;
    
    for int i <- start .. end {
      ref sp = list[i];
      
      if (sp.handler !is CommandHandler:this) continue;
      sp.stream = sp.stream[1..$];
      
      Ray* ray;
      if (src == -1) ray = &rayplanes[sp.ray-id][i];
      else ray = &rayplanes[src][i];
      
      using sp mixin(allocRay);
      
      ref nray = rayplanes[sp.ray-id][i];
      
      auto f = ray_to_coordsf(dw, dh, ray);
      // (fx, fy) = vary(fx, fy, 5);
      // fx = randf() * dw;
      // fy = randf() * dh;
      // fx = floor(fx + 0.5);
      // fy = floor(fy + 0.5);
      f.x += randf() - 0.5;
      f.y += randf() - 0.5;
      coordsf_to_ray(dw, dh, f, &nray);
    }
  }
}

void recordState(VMState* sp, int i, int skipRays, skipResults, vec3f v, bool isBack, float bias) {
  bool record;
  bool isMetroHit = true;
  /*if (sp.burnInCounter > 0) sp.burnInCounter --;
  else */record = true;
  if (record) { c__2 ++; recordResultDg (&rayplanes[skipRays][i], v, isBack, bias, isMetroHit => isMetroHit); }
}

class RecordResultStep : CommandHandler {
  int skipRays, skipResults;
  void init(int skRay = 0, skRes = 0) (skipRays, skipResults) = (skRay, skRes);
  override void recordEffect(VMStats* stats) { }
  override bool irregularStep() { return false; }
  void process(VMState[] list, int start, end) {
    for int i <- start .. end {
      ref sp = list[i];
      if (sp.handler !is CommandHandler:this) fail;
      sp.stream = sp.stream[1..$];
      
      auto v = evaluateRay(&sp, i, skipRays, skipResults, isBack => &bool b);
      recordState(&sp, i, skipRays, skipResults, v, b, 1);
    }
  }
}

class NegatePreStep : CommandHandler {
  override {
    void recordEffect(VMStats* stats) { stats.addsInfo(); }
    bool irregularStep() { return false; }
    void process(VMState[] list, int start, end) {
      for int i <- start .. end {
        ref sp = list[i];
        if (sp.handler !is CommandHandler:this) fail;
        sp.stream = sp.stream[1..$];
        
        ref info1 = infoplanes[sp.info-id][i];
        
        using sp mixin(allocInfo);
        
        ref info2 = infoplanes[sp.info-id][i];
        info2.flags = info1.flags;
        info2.flip;
      }
    }
  }
}

class NegateStep : CommandHandler {
  // flip sign of TraceInfo inside/outside
  override {
    void recordEffect(VMStats* stats) { stats.consumesInfo(); }
    bool irregularStep() { return false; }
    void process(VMState[] list, int start, end) {
      for int i <- start .. end {
        ref sp = list[i];
        if (sp.handler !is CommandHandler:this) fail;
        sp.stream = sp.stream[1..$];
        
        using sp mixin(freeInfo.replace("!!", "1")); // restore previous
        
        ref res = resplanes[sp.result-id][i];
        res.flip;
      }
    }
  }
}

class EverythingStep : CommandHandler {
  override {
    void recordEffect(VMStats* stats) { stats.addsResult; }
    bool irregularStep() { return false; }
    void process(VMState[] list, int start, end) {
      for int i <- start .. end {
        ref sp = list[i];
        if (sp.handler !is CommandHandler:this) fail;
        sp.stream = sp.stream[1..$];
        
        using sp mixin(allocResult);
        ref res = resplanes[sp.result-id][i];
        res.hitUniverse;
      }
    }
  }
}

CommandHandler[] buildNegate(CommandHandler[] seq) {
  CommandHandler[auto~] res;
  
  res ~= new NegatePreStep;
  res ~= seq;
  res ~= new NegateStep;
  
  return res[];
}

class PreNegate : PreHandler {
  PreHandler sub;
  void init(PreHandler sub) this.sub = sub;
  override void iterate(void delegate(PreHandler) dg) { dg sub; }
  override CommandHandler[] flatten() { return buildNegate(scope= sub.flatten()); }
}

PreHandler mkNegate(PreHandler sub) {
  if (auto neg = PreNegate: sub) {
    return neg.sub; // double negation: nuh.
  }
  return new PreNegate(sub);
}

class SetReflect : CommandHandler {
  float f;
  void init(float f) this.f = f;
  override {
    void recordEffect(VMStats* stats) { }
    bool irregularStep() { return false; }
    void process(VMState[] list, int start, end) {
      for int i <- start .. end {
        ref sp = list[i];
        if (sp.handler !is CommandHandler:this) continue;
        sp.stream = sp.stream[1..$];
        
        ref res = resplanes[sp.result-id][i];
        res.reflect = f;
      }
    }
  }
}

class PreReflect : PreHandler {
  float reflect;
  PreHandler base;
  void init(float reflect, PreHandler base) this.(reflect, base) = (reflect, base);
  override void iterate(void delegate(PreHandler) dg) { dg base; }
  override CommandHandler[] flatten() { return (scope= base.flatten()) ~ new SetReflect(reflect); }
}

PreHandler mkReflect(float reflect, PreHandler base) { return new PreReflect(reflect, base); }
