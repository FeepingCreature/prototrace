module unforth;

import std.(string, wren, hashmap, math, file);

class UnforthError : Error {
  string ufmsg;
  void init(string msg) { super.init("UnforthError: $msg"); this.ufmsg = msg; }
}

string[] splitme(string s) {
  string[auto~] res;
  for auto word <- s.split " " if word.length res ~= word;
  return res[];
}

class UnforthContext {
  Thing[auto~] datastack;
  Thing[auto~] vstack;
  Hashmap!(string, void delegate()) dict;
  Hashmap!(string, string[]) macros;
  (string, string)[auto~] userdefs;
  void define(string name, value) {
    for ref (key, v) <- userdefs
      if key == name { key = null; break; } // overwriting
    // optimize "replaced last definition" case
    while (userdefs.length && !userdefs[$-1][0]) userdefs.popEnd;
    userdefs ~= (name, value); // append at the end!
    // writeln "$name = $(value.split \" \")";
    auto vsplitted = splitme value;
    if (vsplitted.(length && _0 == "immediate")) macros.insert(name, vsplitted[1..$]);
    else dict.insert(name, new λ{ execute (vsplitted, name => name); });
  }
  
  void define_builtin(string name, void delegate() dg) {
    dict.insert(name, dg);
  }
  
  void reset() {
    datastack = null;
    vstack = null;
  }
  
  void tpush(Thing t) { datastack ~= t; }
  void vtpush(Thing t) { vstack ~= t; }
  Thing tpop() {
    if (!datastack.length) raise new UnforthError "stack underflow";
    return datastack.popEnd();
  }
  Thing vtpop() {
    if (!vstack.length) raise new UnforthError "vstack underflow";
    return vstack.popEnd();
  }
  
  template  push(T) { void push (T t) {  tpush neat-to-wren t; } }
  template vpush(T) { void vpush(T t) { vtpush neat-to-wren t; } }
  template   pop(T) { T pop() { return wren-to-neat!T  tpop();  } }
  template  vpop(T) { T pop() { return wren-to-neat!T vtpop(); } }
  
  Hashmap!((string*, int), string[auto~]) unrollCache;
  
  void delegate() find_word(string word, context) {
		auto ns_parts = context.split(".");
		// example: "bar" in "a.b.foo";
		// ns_parts = [a,b,foo]
		// ns_to = 3, prefix = "a.b.foo", comined = "a.b.foo.bar"
		// ns_to = 2, prefix = "a.b", combined = "a.b.bar"
		// ns_to = 1, prefix = "a", combined = "a.bar"
		// end of loop, check for just "bar"
		// give up
		for (int ns_to = ns_parts.length; ns_to >= 1; ns_to--) {
			scope string prefix = ns_parts[0..ns_to].join(".");
			if (prefix.length) {
				scope string combined = "$(prefix).$(word)";
				if (auto res = dict.get(combined)) return *res;
			}
		}
		if (auto res = dict.get(word)) return *res;
		return null;
  }
  
  void execute(string line, bool repl = false, bool verbose = false, string name = null) {
    execute(splitme line, repl, verbose, name);
  }
  void execute(string[] words, bool repl = false, bool verbose = false, string name = null) {
    int[auto~] jstack; // jump stack
    
    string[auto~] seq;
    
    if (repl && words.length > 1 && words[1] == "=") {
      define(words[0], words[2..$].join " ");
      if (verbose) writeln "$(words[0]) defined.";
      return;
    }
    
    if (repl && words.length == 2 && words[0] == "?") {
      for string (key, value) <- userdefs if key == words[1] {
        writeln "$key = $value";
        return;
      }
      raise new UnforthError "word not found '$(words[1])'";
    }
    
    void unroll(string[] args) {
      for auto word <- args {
        auto macrop = macros.get(word);
        if (macrop) unroll *macrop;
        else seq ~= word;
      }
    }
    
    if (auto p = unrollCache.get(words.(ptr, length))) {
      seq = *p;
    } else {
      unroll words[];
      unrollCache.insert(words.(ptr, length), seq);
    }
    
    int ip = 0;
    alias endReached = ip == seq.length;
    alias word = seq[ip];
    while (ip < seq.length) {
      // writeln "> $word at $(datastack) $(jstack)";
      
      import std.parser;
      using scoped parser.text = word {
        if (parser.gotFloat(&float f)) {
          push!float f;
          ip ++;
          continue;
        }
      }
      
      int i = atoi word;
      if (word == "$i") {
        push i;
        ip ++;
        continue;
      }
      // test, branch forward
      alias tbrfwd = "tbrfwd", brmrk = "brmrk";
      // push branch marker, branch back
      alias pushbrmrk = "pushbrmrk", popbrmrk = "popbrmrk", brback = "brback";
      if (word == tbrfwd) {
        auto test = pop!bool();
        int depth = 1;
        ip ++;
        if (test) {
          while (depth > 0) { // branch marker
            if (endReached) raise new UnforthError "structural: failed to find closing branch marker";
            if (word == tbrfwd) depth ++;
            else if (word == brmrk) depth --;
            ip ++;
          }
        }
        continue;
      }
      if (word == brmrk) { // noop in regular operation
        ip ++;
        continue;
      }
      if (word == pushbrmrk) {
        ip ++;
        jstack ~= ip;
        continue;
      }
      if (word == brback || word == popbrmrk) {
        if (!jstack.length)
          raise new UnforthError "structural: branched backwards but no jump marker found";
      }
      if (word == brback) {
        ip = jstack[$-1];
        continue;
      }
      if (word == popbrmrk) {
        jstack.popEnd();
        ip ++;
        continue;
      }
      auto meaning = find_word(word, name);
      if (!meaning) {
        raise new UnforthError "Unknown word '$word'";
      }
      meaning();
      ip ++;
    }
    if (jstack.length)
      raise new UnforthError "structural: jumpmark left at end of sequence";
  }
  
  void save(string filename) {
    char[auto~] file;
    for string (key, value) <- userdefs if key {
      file ~= "$key = $value\n";
    }
    filename.writeAll(ubyte[]: file[]);
  }
  
  void load(string filename) {
    int count;
    for auto line <- (string:filename.readAll()).split "\n" {
      execute (splitme line, => repl); // treat input as like from repl.
      count ++;
    }
    writeln "$count definition(s) loaded.";
  }
}

import std.matrix;
final class Wren_Matrix4x4 : Primitive {
  Matrix4x4 mat;
  void init(Matrix4x4* mat) this.mat = *mat;
  string toString() { return mat.toString(); }
}

void setupDefaultWords(UnforthContext context) using context {
  template ophandle(alias Op) {
    void ophandle() {
      auto tb = tpop(), ta = tpop();
      bool bia = !! auto ia = Integer:ta;
      bool bib = !! auto ib = Integer:tb;
      bool bfa = !! auto fa = Number:ta;
      bool bfb = !! auto fb = Number:tb;
      bool bv3fa = !! auto a3f = Vec3f:ta;
      bool bv3fb = !! auto b3f = Vec3f:tb;
      
      if bia && bib {
        int a = ia.num, b = ib.num;
        static if (Op == "/") {{
          if ((a / b) * b == a) push!int(a/b);
          else push!float(a * 1f / b);
        }} else {{
          mixin("push!int(ia.num "~Op~" ib.num); ");
        }}
      } else if (bia && bfb) {
        mixin("push!float(ia.num "~Op~" fb.num); ");
      } else if (bfa && bib) {
        mixin("push!float(fa.num "~Op~" ib.num); ");
      } else if (bfa && bfb) {
        mixin("push!float(fa.num "~Op~" fb.num); ");
      } else if (bv3fa && bv3fb) {
        mixin("push!vec3f(a3f.value "~Op~" b3f.value); ");
      } else if (bv3fa && (bib || bfb)) {
        if (bib) mixin("push!vec3f(a3f.value "~Op~" ib.num); ");
        else mixin("push!vec3f(a3f.value "~Op~" fb.num); ");
      } else if (bv3fb && (bia || bfa)) {
        if (bia) mixin("push!vec3f(ia.num "~Op~" b3f.value); ");
        else mixin("push!vec3f(fa.num "~Op~" b3f.value); ");
      } else raise new UnforthError "Cannot compute: '$ta' '$Op' '$tb'";
    }
  }
  define_builtin("+", new &ophandle!"+");
  define_builtin("-", new &ophandle!"-");
  define_builtin("*", new &ophandle!"*");
  define_builtin("/", new &ophandle!"/");
  template cmphandle(alias Cmp) {
    void cmphandle() {
      auto tb = tpop(), ta = tpop();
      bool bia = !! auto ia = Integer:ta, bib = !! auto ib = Integer:tb;
      bool bfa = !! auto fa = Number :ta, bfb = !! auto fb = Number :tb;
      bool ba = is-nil ta || is-t ta;
      bool bb = is-nil tb || is-t tb;
      if (bia && bib) mixin("push(ia.num "~Cmp~" ib.num); ");
      else if (bia && bfb) mixin("push(ia.num "~Cmp~" fb.num); ");
      else if (bfa && bib) mixin("push(fa.num "~Cmp~" ib.num); ");
      else if (bfa && bfb) mixin("push(fa.num "~Cmp~" fb.num); ");
      else if (ba && bb && (Cmp == "==" || Cmp == "!="))
        mixin("push(is-t ta "~Cmp~" is-t tb); ");
      else raise new UnforthError "Cannot compare: '$ta' '$Cmp' '$tb'";
    }
  }
  define_builtin("<", new &cmphandle!"<");
  define_builtin(">", new &cmphandle!">");
  define_builtin("=", new &cmphandle!"==");
  define_builtin("<=", new &cmphandle!"<=");
  define_builtin(">=", new &cmphandle!">=");
  define_builtin("v<", new λ { vtpush tpop(); });
  define_builtin("v>", new λ { tpush vtpop(); });
  define_builtin("vec3f", new λ {
    auto fz = pop!float(), fy = pop!float(), fx = pop!float();
    push vec3f(fx, fy, fz);
  });
  define_builtin("sin", new λ { push sin pop!float(); });
  define_builtin("cos", new λ { push cos pop!float(); });
  define_builtin("sqrt", new λ { push sqrt pop!float(); });
  define_builtin("angle3f", new λ {
		auto to = pop!vec3f(), from = pop!vec3f();
		push angle3f(from, to);
  });
  define_builtin("cross3f", new λ {
		auto b = pop!vec3f(), a = pop!vec3f();
		push cross3f(a, b);
  });
  define_builtin("drop", new λ {
    tpop();
  });
  define_builtin("pick", new λ {
    auto depth = pop!int();
    if (depth >= datastack.length) raise new UnforthError "stack underflow in $depth pick";
    tpush datastack[$-1 - depth];
  });
  define_builtin("roll", new λ {
    auto depth = pop!int();
    if (depth >= datastack.length) raise new UnforthError "stack underflow in $depth roll";
    auto thing = datastack[$-1 - depth];
    for (int i = depth; i >= 1; --i)
      datastack[$-1 - i] = datastack[$-1 - i + 1];
    datastack[$-1] = thing;
  });
  
  import std.random.(base, mersenne);
  int seed = 420; // trace ray everyday
  auto rng = new MersenneTwister(seed);
  define_builtin("randf", new λ { push neat-to-wren randf(rng); });
  
  define_builtin("mat_ident", new λ {
		push new Wren_Matrix4x4(&auto = Matrix4x4-ident);
  });
  define_builtin("mat_rotate", new λ {
		auto angle = pop!float(), axis = pop!vec3f(), mat = pop!Wren_Matrix4x4();
		mat = new Wren_Matrix4x4 &mat.mat;
		mat.mat.rotate(angle, axis);
		push mat;
  });
  define_builtin("mat_translate", new λ {
		auto by = pop!vec3f(), mat = pop!Wren_Matrix4x4();
		mat = new Wren_Matrix4x4 &mat.mat;
		mat.mat.translate(by);
		push mat;
  });
  define_builtin("mat_scale", new λ {
		auto by = pop!vec3f(), mat = pop!Wren_Matrix4x4();
		mat = new Wren_Matrix4x4 &mat.mat;
		mat.mat.scale(by);
		push mat;
  });
}
