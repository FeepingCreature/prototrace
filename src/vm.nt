module vm;

import base;

Ray[] all_rayplanes;
int rayplane_size;
// JUST an optimization to avoid a multiply! MUST be sequential in all_rayplanes!
Ray[][] rayplanes;

TraceInfo[] all_infoplanes;
int infoplane_size;
TraceInfo[][] infoplanes;

Result[] all_resplanes;
int resplane_size;
// Likewise!
Result[][] resplanes;

void initPlaneMaps() {
  if (rayplanes)  rayplanes.free;
  if (resplanes)  resplanes.free;
  if (infoplanes) infoplanes.free;
  alias rayiter = [for i <- 0..all_rayplanes.length / rayplane_size:
    all_rayplanes[rayplane_size * i .. rayplane_size * (i + 1)]];
  alias resiter = [for i <- 0..all_resplanes.length / resplane_size:
    all_resplanes[resplane_size * i .. resplane_size * (i + 1)]];
  alias infiter = [for i <- 0..all_infoplanes.length / infoplane_size:
    all_infoplanes[infoplane_size * i .. infoplane_size * (i + 1)]];
  rayplanes  = rayiter.eval[];
  resplanes  = resiter.eval[];
  infoplanes = infiter.eval[];
}

struct VMState {
  CommandHandler[] stream;
  
  int result-id, ray-id, info-id;
  
  int gid;
  // int state;
  // float state2;
  // int burnInCounter;
  
  // vec3f rayCache;
  // bool cached, cachedBack;
  
  alias handler = stream[0];
  alias allocResult = `{ result-id ++; resplanes[result-id][i].success = false; }`;
  alias freeResult = `result-id -= !!;`;
  alias allocRay = `ray-id ++;`;
  alias freeRay = `ray-id -= !!;`;
  alias allocInfo = `info-id ++;`;
  alias freeInfo = `info-id -= !!;`;
}

shared CommandHandler[] fullStream; // used for OpenCL

extern(C) float acosf(float);
import std.math;
vec3f evaluateRay(VMState* sp, int i, int firstRay, firstRes, end = 0, bool* isBack = null) {
  // auto rays = sp.rays[firstRay .. $ - end], hits = sp.results[firstRes .. $ - end];
  int numRays = (sp.ray-id - end + 1) - firstRay, numHits = (sp.result-id - end + 1) - firstRes;
  if (numRays != numHits) {
    writeln "Mismatched call for evaluateRay: $numRays and $numHits";
    _interrupt 3;
  }
  
  if (numHits != 1) {
    assert(false, "got $numHits hits .. what");
  }
  ref res = resplanes[firstRes][i];
  if (!res.success) return vec3f(0);
  return resplanes[firstRes][i].emissive-color;
  
  /*
  vec3f res = vec3f(0);
  int start = 0;
  while (start < numHits && (resplanes[firstRes+start][i]).(success && reflective-color != vec3f(0))) {
    start ++;
  }
  
  if (!start) sp.cachedBack = true;
  else sp.cachedBack = false;
  if (isBack) *isBack = sp.cachedBack;
  
  if (start >= numHits) start = numHits - 1;
  Ray* nextRay;
  for (int k = start; k >= 0; --k) {
    auto resp = &resplanes[firstRes+k][i];
    if (!resp.success) continue;
    float factor = 1;
    // cosine weighting
    if (nextRay && resp.reflective-color != vec3f(0) && res != vec3f(0)) {
      auto n = resp.normal.normalized;
      float p = n * nextRay.dir #.sum;
      if (p < 0) {
        n = -n; p = n * nextRay.dir #.sum;
      }
      // this will be almost perfectly 1. smudge it.
      // if (p >= 1) p = 0.99999;
      factor = p;
      // factor = acosf p / (PI/2);
      factor *= 2; // difference between cos weight and cos distribution
    }
    auto oldres = res;
    res = factor * resp.reflective-color * res + resp.emissive-color;
    // if (k != 0 || resp.reflective-color != vec3f(0))
    //   writeln "$k: $(((*resp).reflective-color, (*resp).emissive-color)) on $oldres => $res";
    nextRay = &rayplanes[firstRay+k][i];
  }
  return res;*/
}
